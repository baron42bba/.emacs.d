
* Welcome
[2019-01-29 Tue 18:18]

This configuration comes with only a few add-ons to make your life as
a beginner much more fun.
You can use menues if you want.
If you can't remember keybindings just start with
<ctrl>-c or <ctrl>-x and wait a moment or two. A window will pop up
and tell you what you might want to press next.

Most important: Don't think of Emacs as a strange, old editor.
Emacs is a virtual machine. A LISP Engine to be exactly.
What does that mean?
There a hundreds of applications available you can run within that machine.
To give you an idea visit http://melpa.org
Every package listed there can be easily installed.

You have command line utilities with tons of parameters,
bash-completion is not enough for you?
Well, just start a shell in Emacs. aws cli is one of those tools and
here you have aws-snippets pre-installed bringing you some relief.

You need something for note-taking? Orgmode is there for you.

<ctrl>-<f10> opens this config file.
<ctrl>-<f9> opens org/emacs.org with some tips and tricks.

And don't forget: It's all text. You can easily extend it with your
own tips and tricks.

* set your environment
[2019-01-29 Tue 10:46]

If you decide to compile [[http://www.emacs.org][Emacs]] from sources:

#+BEGIN_SRC sh :eval never
  ./configure --prefix=/home/user/.emacs26.1 --with-dbus --with-gif --with-jpeg --with-png --with-rsvg --with-tiff --with-xft --with-xpm --with-x-toolkit=gtk
  make && make install
#+END_SRC

You should configure a few environment variables on your system.
Those lines might fit into your =.bashrc=:

#+NAME: .bashrc
#+BEGIN_SRC sh :eval never
  # to distinguish your computer between work and private!
  export SYSENV=work
  if [ "$SYSENV" == "work" ]; then
      export EMAIL=your.work@address.com
      export ORGANIZATION="Employer Inc."
  else
      export EMAIL=private@your-life.org
  fi

#+END_SRC

Those environment variables come in handy for other tools as well but
we consume them here:

#+BEGIN_SRC emacs-lisp :tangle yes
  (setenv "EDITOR" "emacsclient")
  (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $PATH")))
              (setenv "PATH" path)
              (setq exec-path
                    (append
                     (split-string-and-unquote path ":")
                     exec-path)))
  (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $EMAIL")))
              (setenv "EMAIL" path)
              )
  (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $ORGANIZATION")))
              (setenv "ORGANIZATION" path)
              )
  (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $SSH_AUTH_SOCK")))
              (setq ssh-auth-sock path)
              (setenv "SSH_AUTH_SOCK" path)
              )
  (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; pidof ssh-agent | tr -d ' \n'")))
              (setenv "SSH_AGENT_PID" path)
              )
  (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $SYSENV")))
              (setenv "SYSENV" path)
              )
#+END_SRC

* Keybindings

Just a few Keybindings to make your life easier.

| key                     | command                 |
|-------------------------+-------------------------|
| <ctrl>-c m              | magit-status            |
| <ctrl>-c <ctrl>-<space> | jump to word            |
| <META>-g g              | goto line               |
| <ctrl>-<f10>            | open config file.       |
| <super>-d               | duplicate previous line |


#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key global-map "\C-cm" 'magit-status)
  (define-key global-map (kbd "C-c C-SPC") 'avy-goto-word-1)
  (define-key global-map (kbd "M-g g") 'avy-goto-line)
  (global-set-key (kbd "C-c <f10>") '(lambda() (interactive) (find-file "~/.emacs.d/README.org")))

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes


  (global-set-key (kbd "C-c <f5>") '(lambda () (interactive) (find-file "~/org/notes.org")))

  (global-set-key (kbd "C-c <f7>") '(lambda () (interactive) (find-file "~/org/private.org")))
  (global-set-key (kbd "C-c <f8>") '(lambda () (interactive) (find-file "~/org/workhours.org")))
  (if (equal "work" (getenv "SYSENV"))
      (progn
        (global-set-key (kbd "C-c <f6>") '(lambda () (interactive) (find-file "~/workorg/work.org")))
        (global-set-key (kbd "C-c S-<f6>") '(lambda () (interactive) (find-file "~/workorg/work_archive.org")))
        )
    (progn
      (global-set-key (kbd "C-c <f6>") '(lambda () (interactive) (find-file "~/org/work.org")))
      ))

  (global-set-key (kbd "C-c <f9>") '(lambda () (interactive)
                                      ( if (file-exists-p "~/org/emacs.org")
                                          (find-file "~/org/emacs.org")
                                        (find-file "~/.emacs.d/org/emacs.org"))))

#+END_SRC

duplicate previous line

#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "s-d") "\C-p\C-a\C- \C-n\M-w\C-y")
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle yes


  (define-prefix-command 'bba/launcher)
  (define-key global-map "\C-xl" 'bba/launcher)

  (define-key bba/launcher "!" 'eshell-here)
  (define-key bba/launcher "b" 'browse-url-at-point)
  (define-key bba/launcher "B" 'eww)
  (define-key bba/launcher "c" 'helm-calcul-expression)
  (define-key bba/launcher "d" 'ediff-buffers)
  (define-key bba/launcher "e" 'eshell)
  (define-key bba/launcher "E" 'elfeed)
  (define-key bba/launcher "i" 'ielm)
  (define-key bba/launcher "l" 'magit-log-buffer-file)
  (define-key bba/launcher "s" 'shell)
  (define-key bba/launcher "\C-s" 'helm-swoop)

  (define-key global-map "\C-c\C-t" 'insert-timestamp)
  (define-key global-map "\C-c\M-c" 'centered-cursor-mode)

  (define-key global-map "\C-ci" 'imenu)
  (define-key global-map "\C-c\S-g" 'rgrep)

  (define-key global-map "\C-c\C-w" 'fixup-whitespace)

  (define-key global-map "\M-g\M-d" 'magit-diff-unstaged)
  (define-key global-map "\M-g\S-d" '(lambda()
                                     (interactive)
                                     (call-interactively 'magit-file-delete)
                                     (kill-buffer)
                                     )
    )
  (define-key global-map "\M-g\M-b" 'magit-branch-manager)
  (define-key global-map "\M-gb" 'magit-blame-popup)
  (define-key global-map "\C-cm" 'magit-status)
  (global-set-key (kbd "C-c s-m") 'magit-list-repositories)

  (define-key global-map "\C-c\S-f" (lambda()
                                   (interactive)
                                   (message (buffer-file-name))))

  (define-key global-map "\C-c\M-d" 'diff-buffer-with-file)

  ;;; ** Use C-+ and C-- to adjust font size

  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)

  (define-prefix-command 'bba/toggle)
  (define-key global-map "\C-ct" 'bba/toggle)
  (define-key bba/toggle "\S-s" 'smerge-mode)


#+END_SRC

=isearch-forward-regexp= is much more useful than =isearch-forward= so
we use that as default:

#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
#+END_SRC

Toggle Whitespace mode on and off.  Whitespace mode causes all hard
tabs to be highlighted.  You can also configure it to highlight space
characters in a different color.  There is also an untabify function
to convert hard tabs to the appropriate number of spaces, and a tabify
function to convert groups of spaces to hard tabs.

#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key bba/toggle "w" 'whitespace-mode)

  (setq whitespace-display-mappings
         ;; all numbers are Unicode codepoint in decimal. try (insert-char 182 ) to see it
        '(
          (space-mark 32 [183] [46]) ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
          (newline-mark 10 [182 10]) ; 10 LINE FEED
          (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
          ))
#+END_SRC

* guide-key

This helps you to remember keybindings.
Just start typing and wait a second or two.

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'guide-key)
  (setq guide-key/guide-key-sequence '("C-x" "C-x C-k" "C-x 4" "C-c" "C-h" "C-x l" "<ESC>" "<f9>"))
  (setq guide-key/recursive-key-sequence-flag t)
  (setq guide-key/idle-delay 3)
  (guide-key-mode 1)
#+END_SRC

* [[http://editorconfig.org/][editorconfig]]
[2017-01-06 Fri 14:27]

Set default indentation, end of line, trailing whitespaces etc for the
whole team. No matter what editor gets used.

#+BEGIN_SRC emacs-lisp :tangle yes
  (editorconfig-mode '1)

#+END_SRC

* helm

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'helm)
  (helm-mode 1)
  (setq helm-mini-defaults-sources '(helm-source-buffers-list
				     helm-source-recentf
				     helm-source-bookmarks
				     helm-source-buffer-not-found))
  (define-key global-map "\C-xb" 'helm-mini)
  (global-set-key "\C-cr" 'helm-recentf)
  (define-key global-map "\C-x\C-k\C-h" 'helm-execute-kmacro)
  (define-key global-map (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
#+END_SRC

* insert-date functions
[2019-01-29 Tue 11:02]

You can access those functions easily via M-x or add some keybindings
for them.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun bba-insert-date ()
  "Insert the current date"
  (interactive)
  (insert (format-time-string "%B %e, %Y")))

  (defun bba-insert-timestamp ()
  "Insert the current timestamp"
  (interactive)
  (insert (format-time-string "%Y%m%d-%H%M")))

  (defun bba-insert-name-timestamp ()
  "Insert the current timestamp"
  (interactive)
  (insert (format-time-string "%a %b %e %Y") " " (or (and (boundp 'user-full-name) user-full-name) (user-full-name))" <" (getenv "EMAIL") ">" ))

  (defun bba-insert-name ()
  "Insert name and emailaddress of current systemuser."
  (interactive)
  (insert (or (and (boundp 'user-full-name) user-full-name) (user-full-name))" <" (getenv "EMAIL") ">" ))
  (define-key global-map (kbd "s-n") 'bba-insert-name)

  (defun bba-insert-changelog-signature ()
    "Insert name and timestamp in changelog format."
    (interactive)
    (insert " -- " (or (and (boundp 'user-full-name) user-full-name) (user-full-name))" <" (getenv "EMAIL") ">  " (format-time-string "%a, %d %b %Y %H:%M:%S %z")))
#+END_SRC

* [[https://github.com/stig/ox-jira.el][ox-jira]]
[2019-01-29 Tue 16:39]

Org-mode export backend for JIRA markup

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'ox-jira)
#+END_SRC

We are lazy and want to speed up things:

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun bba-org-export-jira-clipboard()
    "narrow to org subtree and store content in jira format in clipboard."
    (interactive)
    (org-narrow-to-subtree)
    (bba-export-jira-org)
    (let ((org-export-use-babel nil))
      (ox-jira-export-as-jira))
    (delete-region (point) (progn (forward-line 1)(point)))
    (push-mark (point))
    (push-mark (point-max) nil t)
    (goto-char (point-min))
    (kill-ring-save 1 1 1)
    (other-window -1)
    (widen)
    (other-window 1)
    )

  (define-key org-mode-map "\C-c\S-j" 'bba-org-export-jira-clipboard)
#+END_SRC

Besides the clipboard we want also an org file in =/tmp/= to attach to
the jira ticket. Of course some boiler plate for the poor souls who
never heard of orgmode.


#+BEGIN_SRC emacs-lisp :tangle yes
  (defun bba-export-jira-org()
    "export current narrowed view to file in tmp and open a finder window on OS-X."
    (interactive)
    (goto-char (point-min))
    (insert "# This file is just plain text called orgmode")
    (newline)
    (insert "# https://en.wikipedia.org/wiki/Org-mode")
    (newline)
    (insert "# You can open it in any text editor or file reader.")
    (newline)
    (insert "# You might want to use Emacs for best experience.")
    (newline)
    (if (re-search-forward "jira:" nil t 1)
        (if (org-in-regexp org-bracket-link-regexp 1)
            (let ((remove (list (match-beginning 0) (match-end 0)))
                  (description (last (split-string (if (match-end 3)
                                                       (match-string-no-properties 3)
                                                     (match-string-no-properties 1)) ":"))))
              (org-open-at-point)
              (push-mark (point))
              (push-mark (point-max) nil t)
              (goto-char (point-min))
              (write-region (mark) (point) (concat "/tmp/" (car description) ".org") nil nil )
              (deactivate-mark)
              (if (string-equal system-type "darwin")(shell-command "open /tmp/")
              (if (string-equal system-type "gnu/linux")(shell-command "xdg-open /tmp/")))
              )))
    (goto-char (point-min))
    (kill-line 4)
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun bba-open-jira()
  "open current ticket."
  (interactive)
  (let ((oldpoint (point-marker)))
  (org-narrow-to-subtree)
  (goto-char (point-min))
  (if (re-search-forward "jira:" nil t 1)
      (org-open-at-point)
    (progn (widen)
            (outline-up-heading 1 t)
            (bba-open-jira)
  ))
  (widen)
  (goto-char oldpoint)
  )
  )

  (define-key org-mode-map "\C-xl\S-j" 'bba-open-jira)
#+END_SRC

* [[http://www.emacswiki.org/emacs/RecentFiles][RecentFiles]]

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-saved-items 200
	recentf-max-menu-items 142)
  (global-set-key "\C-cr" 'recentf-open-files)
#+END_SRC

* smartparens-mode

Enable smart parens in all modes.
See [[https://github.com/toctan/smartparens][Smartparens on github]].
Some key bindings taken from [[https://ebzzry.github.io/emacs-pairs.html][emacs-pairs]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'smartparens)
  (smartparens-global-mode 1)
  (defmacro def-pairs (pairs)
    `(progn
       ,@(cl-loop for (key . val) in pairs
		  collect
		  `(defun ,(read (concat
				  "wrap-with-"
				  (prin1-to-string key)
				  "s"))
		       (&optional arg)
		     (interactive "p")
		     (sp-wrap-with-pair ,val)))))

  (def-pairs ((paren        . "(")
	      (bracket      . "[")
	      (brace        . "{")
	      (single-quote . "'")
	      (double-quote . "\"")
	      (back-quote   . "`")))

  (define-key smartparens-mode-map (kbd "C-'") 'sp-rewrap-sexp)
  (define-key smartparens-mode-map (kbd "C-c (") 'wrap-with-parens)
  (define-key smartparens-mode-map (kbd "C-c ]") 'sp-backward-unwrap-sexp)
  (define-key smartparens-mode-map (kbd "C-c )") 'sp-unwrap-sexp)
  (define-key smartparens-mode-map (kbd "C-c [") 'wrap-with-brackets)
  (define-key smartparens-mode-map (kbd "C-c {") 'wrap-with-braces)
  (define-key smartparens-mode-map (kbd "<C-S-kp-4>") 'sp-beginning-of-sexp)
  (define-key smartparens-mode-map (kbd "<C-S-kp-6>") 'sp-end-of-sexp)
  (define-key smartparens-mode-map (kbd "<C-S-kp-8>") 'sp-up-sexp)
  (define-key smartparens-mode-map (kbd "<C-S-kp-2>") 'sp-down-sexp)
  (show-paren-mode 1)
  (setq show-paren-style 'expression)
  (setq blink-matching-paren-distance nil)
#+END_SRC

* goto-match-paren
#+BEGIN_SRC emacs-lisp :tangle yes
      (defun goto-match-paren (arg)
        "Go to the matching parenthesis if on parenthesis, otherwise insert %.
      vi style of % jumping to matching brace."
        (interactive "p")
        (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
              ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
              (t (self-insert-command (or arg 1)))))
      (global-set-key "%" 'goto-match-paren)

#+END_SRC

* save hash bang files executable
save files with #! in first line as user executable.

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook `after-save-hook
            #'(lambda ()
                (if (not
                     (or
                      (string-match ".htm" buffer-file-name)
                      (string-match ".org" buffer-file-name))
                     )
                    (check-parens))

                (and (save-excursion
                       (save-restriction
                         (widen)
                         (goto-char (point-min))
                         (save-match-data
                           (looking-at "^#!"))))
                     (if (file-remote-p buffer-file-name)
                         (progn
                           (not (file-executable-p buffer-file-name))
                           (shell-command (concat "chmod u+x " (file-name-nondirectory buffer-file-name)))
                           (message
                            (concat "Saved as script via tramp: " buffer-file-name))
                           )
                       (progn
                         (not (file-executable-p buffer-file-name))
                         (shell-command (concat "chmod u+x " buffer-file-name))
                         (message
                          (concat "Saved as script: " buffer-file-name)))))))

#+END_SRC

* save history
    [2015-04-05 Sun 12:57]

Write a history of your emacs into your org git repository.
You have it available on every system and it's still private at it's
not in the public git emacs configuration.

- kill ring
- search ring
- regexp-search-ring
- last-kbd-macro
- kmacro-ring
- shell-command-history

all in your history.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring last-kbd-macro kmacro-ring shell-command-history))
  (setq kmacro-ring-max 42)
  (setq history-delete-duplicates t)
  (setq savehist-file "~/.emacshistory")
  (if (file-exists-p savehist-file)
      (load-file savehist-file))
  (savehist-mode 1)
#+END_SRC

Confirm quit to avoid hitting C-x C-c by accident.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

* syntax-highlighting
#+BEGIN_SRC emacs-lisp :tangle yes
  (font-lock-mode)
  (global-font-lock-mode 1)

#+END_SRC

* colors
[2019-01-29 Tue 17:07]

#+BEGIN_SRC emacs-lisp :tangle yes
  (deftheme bba1 "DOCSTRING for bba1")
       (custom-theme-set-faces 'bba1
        '(default ((t (:foreground "#07e30d" :background "#282828" ))))
        '(cursor ((t (:background "#f09213" ))))
        '(fringe ((t (:background "#131313" ))))
        '(mode-line ((t (:foreground "#282828" :background "#d96503" ))))
        '(region ((t (:background "#7a7674" ))))
        '(secondary-selection ((t (:background "#584e47" ))))
        '(font-lock-builtin-face ((t (:foreground "#fe8019" ))))
        '(font-lock-comment-face ((t (:foreground "#df7114" ))))
        '(font-lock-function-name-face ((t (:foreground "#b8bb26" ))))
        '(font-lock-keyword-face ((t (:foreground "#fb4934" ))))
        '(font-lock-string-face ((t (:foreground "#b8bb26" ))))
        '(font-lock-type-face ((t (:foreground "#d3869b" ))))
        '(font-lock-constant-face ((t (:foreground "#d3869b" ))))
        '(font-lock-variable-name-face ((t (:foreground "#83a598" ))))
        '(minibuffer-prompt ((t (:foreground "#b8bb26" :bold t ))))
        '(font-lock-warning-face ((t (:foreground "red" :bold t ))))
        )
  (provide-theme 'bba1)

  (if (display-graphic-p)
        (progn
          (custom-set-faces
           '(org-block-begin-line ((t (:background "#07538a" :foreground "#84cbef"))) t)
           '(org-block-end-line ((t (:inherit org-block-begin-line))) t)
           '(org-block ((t (:inherit shadow :background "#29759c" :foreground "#84cbef" :distant-forground "#131313"))))
           ;; '(show-paren-match ((t (:distant-foreground "#29759c":background "#84cbef" ))))
           ;;'(show-paren-match ((t (:inverse-video t))))
         '(show-paren-match ((t (:underline (:color "#07e30d" :style line)))))
         '(show-paren-mismatch ((t (:underline (:color "red" :style wave)))))
           ;; '(show-paren-match ((t (:unterline (:color "#b8bb26" :style wave)))))
           )
          (let* ((variable-tuple (cond ((x-list-fonts "Arial") '(:font "Arial"))
                                       ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                                       ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                                       ((x-list-fonts "Verdana")         '(:font "Verdana"))
                                       ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                                       (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
                 (base-font-color     (face-foreground 'default nil 'default))
                 (headline           `(:inherit default :foreground "#62a9cd")))

            (custom-theme-set-faces 'user
                                    `(org-level-8 ((t (,@headline ,@variable-tuple))))
                                    `(org-level-7 ((t (,@headline ,@variable-tuple))))
                                    `(org-level-6 ((t (,@headline ,@variable-tuple))))
                                    `(org-level-5 ((t (,@headline ,@variable-tuple))))
                                    `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
                                    `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
                                    `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.4))))
                                    `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.6))))
                                    `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil)))))
            (custom-set-variables
              '(ansi-color-names-vector
                ["black" "red3" "green3" "yellow3" "LightSkyBlue1" "magenta3" "cyan3" "gray90"]))
            )))
#+END_SRC
* yasnippet
[2019-01-29 Tue 13:59]

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'yasnippet)
  (yas-reload-all)
  (yas-global-mode 1)
  (setq yas-indent-line nil)
  (setq yas-triggers-in-field t)
  (auto-insert-mode 1)
  (define-key global-map "\C-cy" 'helm-yas-complete)
#+END_SRC
