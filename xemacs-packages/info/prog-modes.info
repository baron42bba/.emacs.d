This is prog-modes.info, produced by makeinfo version 4.7 from
prog-modes.texi.

INFO-DIR-SECTION XEmacs Editor
START-INFO-DIR-ENTRY
* Programming Modes: (prog-modes).	Programming Modes for XEmacs.
END-INFO-DIR-ENTRY


File: prog-modes.info,  Node: Top,  Next: Copying,  Prev: (dir),  Up: (dir)

1 The Programming Modes Package
*******************************

This Info file contains the manual for the Programming Modes package.

The node name for each entry in the menu is the name of the elisp file
containing the code that implements the functionality described.  It is
highly recommended that you briefly peruse the elisp source code since
it can provide valuable information on usage and technique.  This can
easily be done by typing `C-x 4 l <filename> RET' where <filename> is
the name of the elisp file to be loaded.

   In many cases, the `customize' command can be used to customize a
package's options.  For those packages that support `customize', the
appropriate command is given.  Otherwise, peruse the code as described
above to learn how to set the package's options.

   When you have entered a mode, you may get more info on the
capabilities of that mode by pressing `C-h m'. You may also get online
help describing functions provided by the mode by pressing `C-h f
<function name>'.

* Menu:

* Copying::

* asm-mode::                    Editing Assembler Code
* autoconf-mode::               Editing Autoconf Input Files
* awk-mode::                    Editing AWK Code
* cl-indent::                   Enhanced Lisp-Indent Mode
* cvs::                         Light CVS Support
* diff-mode::                   Viewing and Editing Context Diffs
* eiffel::                      Editing Eiffel Code
* icon::                        Editing Icon Code
* javascript-mode::             Editing JavaScript Code
* ksh-mode::                    Editing Shell Script (sh, ksh, bash) Code
* lua-mode::                    Editing Lua Code
* m4-mode::                     Editing m4 Code
* make-mode::                   Editing Makefiles
* mode-compile::                Compiling Files According to Major-Mode
* modula2::                     Editing Modula-2 Code
* old-c-mode::                  Editing C Code
* p4::                          Integration with Perforce Version Control
* pascal::                      Editing Pascal Code
* php-mode::                    Editing PHP Code
* postscript::                  Editing PostScript Programs
* prolog::                      Editing and Running Prolog Code
* rexx-mode::                   Editing REXX Code
* rpm-spec-mode::               Editing RPM Spec Files
* simula::                      Editing SIMULA 87 Code
* sql::                         Specialized Mode for SQL Interpreters
* tcl::                         Editing Tcl Code
* teco::                        Teco Interpreter
* uil-mode::                    Editing Motif UIL Code
* verilog-mode::                Editing Verilog HDL Source
* vrml-mode::                   Editing VRML (.wrl) Files

* XEmacs License::              XEmacs License


File: prog-modes.info,  Node: Copying,  Next: asm-mode,  Prev: Top,  Up: Top

2 Copying
*********

This document may be redistributed, verbatim or in modified form, under
the terms of the GNU General Public License, version 2 or any later
version.  The same terms apply to the libraries it documents.  A copy
of the General Public License is provided as an Appendix.

   Most XEmacs documentation has its own license, which is an ancestor
of the GNU Free Documentation License ("FDL"), and whose terms are
quite similar to those imposed by GNU on Emacs documentation.  Why is
this manual licensed differently (under the GNU General Public License,
or "GPL"), and why does it have to be distributed separately from the
XEmacs User's Guide and the XEmacs Lisp Reference Manual?

   Taking the second question first, XEmacs is "community-owned"
software.  That is, unlike GNU Emacs, there is no monopoly copyright
holder.  Many of us, including the original Lucid authors, have
contributed our copyrights to the Free Software Foundation (FSF), and of
course much content is derived from GNU Emacs, and therefore is held by
the FSF.  Another large chunk is held by Sun Microsystems, and a few
individual authors hold copyright to thousands of lines each.  But many
individuals hold copyright to only a few dozen lines.  Like the Linux
kernel, copyright ownership is distributed throughout a community.

   However, its license is "copyleft," _i.e._, it _requires_ that you
redistribute it under terms _identical_ to those under which you
received it, unless you have explicit permission of the copyright
holder.  Because of the multiple owners, determining the ownership of
any given part of XEmacs is tedious, and perhaps impossible.  For
practical purposes, then, the license of any substantial chunk of
existing XEmacs content cannot be changed, except to a later version of
the GPL, for those parts under GPL.  (That is due to the _explicit_
permission to change to a later version of the GPL, present in every
file of XEmacs.)

   Unfortunately, this severe restriction means that the GPL, FDL, and
the XEmacs documentation license ("XDL") are _mutually incompatible_.
That is, content licensed under any of the GPL, FDL, or XDL _may not_
be mixed with content licensed under either of the other two without
changing the license of some of the content.  But this requires
permission of the copyright holder, which is often difficult or
impossible to get.

   For example, you _may not_ take comments or docstrings from XEmacs
code and add them to the Lispref to mend a gap in the latter's coverage.
You _may not_ copy text from the Lispref into docstrings in the code.
And you _may not_ copy text from the GNU Emacs Lisp Reference to the
XEmacs Lisp Reference Manual.  (In this case it is at least trivial to
ask permission, although it is rather unclear whether it would be
granted.)

   In fact, parts of this document were derived by copying from XEmacs
code under the GPL, without any further permission from the authors.
Thus, this document must be distributed under the GPL, as a "volume"
separate from the XEmacs documentation under the XDL.  Note that the
"mere aggregation" clauses allow us to distribute in the same tarball.
But incorporating it as a node in the Lispref is prohibited, even if
done by inclusion.

   A bit of advocacy:

   If you look carefully at the additional restrictions imposed by the
soi-disant "free" documentation licenses, you discover that they are
simply proprietary restrictions guaranteeing a certain amount of
_unpaid_ political advertising to the Free Software Foundation and GNU
Project (and in the case of the FDL, this is extended to commercial
advertising by authors of original or derived works).  Whether this is
"ethically justified" or not is a difficult question.  What is certain
is that there is little social benefit to these terms (since the license
documents themselves contain the advocacy and must be included with any
distribution).

   I conclude it makes sense for XEmacs to reduce its restrictions,
where possible, to the "least common denominator," the GNU General
Public License.


File: prog-modes.info,  Node: asm-mode,  Next: autoconf-mode,  Prev: Copying,  Up: Top

3 Editing Assembler Code
************************

This mode is used for editing Assembler code.  The mode is automatically
invoked for buffers visiting any file ending with one of the following
extensions: `.s', `.S', `.asm'.

   The mode is based on text-mode.  It defines a private abbrev table
that can be used to save abbrevs for assembler mnemonics.  It binds
just five keys:

`TAB'
     Tab to next tab stop

`:'
     Outdent preceding label, tab to tab stop

`comment char'
     Place or move comment.  `asm-comment-char' specifies which
     character this is; you can use a different character in different
     Asm mode buffers.  Alternatively, you may set this variable in
     `asm-mode-set-comment-hook', which is called near the beginning of
     mode initialization.

`C-j, C-m'
     Newline and tab to tab stop


   Code is automatically indented to the first tab stop level.

   Turning on Asm mode runs the hook `asm-mode-hook' at the end of
initialization.

   To configure this package, type:

       M-x customize-group RET asm RET


File: prog-modes.info,  Node: autoconf-mode,  Next: awk-mode,  Prev: asm-mode,  Up: Top

4 Editing Autoconf Input Files
******************************

This mode is used for editing autoconf input files.  It is automatically
invoked for buffers visiting the following types of files:

   * any file ending with an extension of `.m4'

   * any file named `configure' ending with an extension of either
     `.in' or `.ac'.


   To configure this package please view the source code.  This can be
done by typing `C-x 4 l autoconf-mode'.

* Menu:

* About Autoconf: about-autoconf.


File: prog-modes.info,  Node: about-autoconf,  Prev: autoconf-mode,  Up: autoconf-mode

4.1 About Autoconf
==================

Autoconf is an extensible package of m4 macros that produce shell
scripts to automatically configure software source code packages. These
scripts can adapt the packages to many kinds of UNIX-like systems
without manual user intervention. Autoconf creates a configuration
script for a package from a template file that lists the operating
system features that the package can use, in the form of m4 macro calls.


File: prog-modes.info,  Node: awk-mode,  Next: cl-indent,  Prev: autoconf-mode,  Up: Top

5 Editing AWK Code
******************

This mode is used for editing Awk code.  It is automatically invoked for
buffers visiting the following types of files:

   * any file ending with an extension of `.awk'.

   * any file that has an interpretor line (the "shebang" line)
     specifying "awk".


   The mode operates much like C mode except for the syntax of
comments.  It uses the same keymap as C mode and has the same variables
for customizing indentation.  It has its own abbrev table and its own
syntax table.

   Turning on AWK mode calls the value of the variable `awk-mode-hook'
with no arguments, if that value is non-nil.

   NOTE: This library is obsolete.  Support for AWK is now available
directly via the cc-mode package.  *Note AWK Mode: (cc-mode)AWK Mode.,
for details.

* Menu:

* About Awk: about-awk.


File: prog-modes.info,  Node: about-awk,  Prev: awk-mode,  Up: awk-mode

5.1 About Awk
=============

Awk is a text-processing programming language.  It is a useful and
simple tool for manipulating text.


File: prog-modes.info,  Node: cl-indent,  Next: cvs,  Prev: awk-mode,  Up: Top

6 Enhanced Lisp-Indent Mode
***************************

This package provides an extension to lisp-mode.  It supplies a single
entry point, `common-lisp-indent-function', which performs indentation
in the preferred style for Common Lisp code.  To enable it add the
following to your `user-init-file':

       (setq lisp-indent-function 'common-lisp-indent-function)

   To configure this package, type:

       M-x customize-group RET lisp-indent RET


File: prog-modes.info,  Node: cvs,  Next: diff-mode,  Prev: cl-indent,  Up: Top

7 Light CVS Support
*******************

This package provides simple CVS support within the editing session.

   The package provides the following features:

   * Displays the CVS revision in the mode line.

   * Compares file changes between CVS revisions using `ediff'.

   * Keystrokes and menu entries to execute `cvs status', `cvs log' and
     `cvsann'.

   * Simple interface to `cvs commit' and `cvs update' commands.

   * Status listing per directory.

   * `msb' support (better buffer selection).

   * `dired' support.

   * Softlink tree support.

   * Little module support (status and update).


   To install this library, add the following to your `user-init-file':

       (require 'cvs)

   To configure this package please view the source code.  This can be
done by typing `C-x 4 l cvs'.

   For related packages please see *Note PCL-CVS: (pcl-cvs)Top. and
*Note Version Control: (xemacs)Version Control.

* Menu:

* About CVS: about-cvs.


File: prog-modes.info,  Node: about-cvs,  Prev: cvs,  Up: cvs

7.1 About CVS
=============

CVS is the Concurrent Versions System, an open-source
network-transparent version control system.  More information on CVS
can be found at CVS Home (http://www.cvshome.org/).


File: prog-modes.info,  Node: diff-mode,  Next: eiffel,  Prev: cvs,  Up: Top

8 Viewing and Editing Context Diffs
***********************************

This mode facilitates viewing and editing of context diffs.  It is
automatically invoked buffers visiting any file ending with one of the
following extensions: `.diff', `.diffs', `.patch', `.rej'.

   The mode provides support for font-lock, outline, navigation
commands, editing and various conversions as well as jumping.

   The following key mappings are defined:

`C-c'       << Prefix Command >>
`M-A'       diff-ediff-patch
`M-C'       diff-unified->context
`M-K'       diff-file-kill
`M-N'       diff-file-next
`M-P'       diff-file-prev
`M-R'       diff-reverse-direction
`M-U'       diff-context->unified
`M-W'       widen
`M-k'       diff-hunk-kill
`M-n'       diff-hunk-next
`M-o'       diff-goto-source
`M-p'       diff-hunk-prev
`M-r'       diff-restrict-view
`M-{'       diff-file-prev
`M-}'       diff-file-next
`M-delete'  scroll-down
`M-return'  diff-goto-source
`M-space'   scroll-up
`M-C-m'     diff-goto-source
`C-c C-a'   diff-apply-hunk
`C-c C-c'   diff-goto-source
`C-c C-s'   diff-split-hunk
`C-c C-t'   diff-test-hunk

   To configure this package, type:

       M-x customize-group RET diff-mode RET


File: prog-modes.info,  Node: eiffel,  Next: icon,  Prev: diff-mode,  Up: Top

9 Editing Eiffel Code
*********************

This mode is used for editing Eiffel code.  It is automatically invoked
for buffers visiting any file ending in an extension of `.e'.

   The following key mappings are defined:

`return'   reindent-then-newline-and-indent
`C-c'      << Prefix Command >>
`C-j'      newline-and-indent
`C-x'      << Prefix Command >>
`M-''      eif-feature-quote
`M-q'      eif-fill-paragraph
`M-C-a'    eif-beginning-of-feature
`M-C-e'    eif-end-of-feature
`M-C-q'    eif-indent-construct
`C-c C-c'  eif-compile
`C-c C-o'  eif-set-compile-options
`C-c C-r'  eif-run
`C-c C-s'  eif-short
`C-x n'    << Prefix Command >>
`C-x n d'  eif-narrow-to-feature

   To configure this package, type:

       M-x customize-group RET eiffel RET

* Menu:

* About Eiffel: about-eiffel.


File: prog-modes.info,  Node: about-eiffel,  Prev: eiffel,  Up: eiffel

9.1 About Eiffel
================

The Eiffel programming language was created by Bertrand Meyer and
developed by his company, Interactive Software Engineering (ISE) of
Goleta, CA in 1985.  More information on Eiffel can be found at the
Eiffel Web Site
(http://www.engin.umd.umich.edu/CIS/course.des/cis400/eiffel/eiffel.html).


File: prog-modes.info,  Node: icon,  Next: javascript-mode,  Prev: eiffel,  Up: Top

10 Editing Icon Code
********************

This mode is used for editing Icon code.  It is automatically invoked
for buffers visiting any file ending in an extension of `.icn'.

   The mode provides the following features:

   * Expression and list commands understand all Icon brackets.

   * Tab indents for Icon code.

   * Paragraphs are separated by blank lines only.

   * Delete converts tabs to spaces as it moves back.

   The following key mappings are defined:

`{'            electric-icon-brace
`}'            electric-icon-brace
`delete'       backward-delete-char-untabify
`menu-bar'     << Prefix command "Icon" >>
`M-backspace'  mark-icon-function
`M-C-a'        beginning-of-icon-defun
`M-C-e'        end-of-icon-defun
`M-C-h'        mark-icon-function
`M-C-q'        indent-icon-exp

   The variables controlling indentation style are:

`icon-tab-always-indent'
     Non-nil means TAB in Icon mode should always reindent the current
     line, regardless of where in the line point is when the TAB
     command is used.

`icon-auto-newline'
     Non-nil means automatically newline before and after braces
     inserted in Icon code.

`icon-indent-level'
     Indentation of Icon statements within surrounding block.  The
     surrounding block's indentation is the indentation of the line on
     which the open-brace appears.

`icon-continued-statement-offset'
     Extra indentation given to a substatement, such as the then-clause
     of an if or body of a while.

`icon-continued-brace-offset'
     Extra indentation given to a brace that starts a substatement.
     This is in addition to `icon-continued-statement-offset'.

`icon-brace-offset'
     Extra indentation for line if it starts with an open brace.

`icon-brace-imaginary-offset'
     An open brace following other text is treated as if it were this
     far to the right of the start of its line.


   Turning on Icon mode calls the value of the variable `icon-mode-hook'
with no args, if that value is non-nil.

   To configure this package, type:

       M-x customize-group RET icon RET

* Menu:

* About Icon: about-icon.


File: prog-modes.info,  Node: about-icon,  Prev: icon,  Up: icon

10.1 About Icon
===============

Icon is a high-level, general-purpose programming language with a large
repertoire of features for processing data structures and character
strings. Icon is an imperative, procedural language with a syntax
reminiscent of C and Pascal, but with semantics at a much higher level.
More information on Icon can be found at The Icon Programming Language
(http://www.cs.arizona.edu/icon/).


File: prog-modes.info,  Node: javascript-mode,  Next: ksh-mode,  Prev: icon,  Up: Top

11 Editing JavaScript Code
**************************

This mode is used for editing JavaScript code.  It is automatically
invoked for buffers visiting any file ending in an extension of `.js' or
`.pac'.

   See the documentation for `c++-mode': JavaScript mode is an
extension of it (*note CC Mode: (cc-mode)Top.).  Use the hook
`javascript-mode-hook' to execute custom code when entering JavaScript
mode.

   The following key mappings are defined:

`#'             c-electric-pound
`(, )'          c-electric-paren
`*'             c-electric-star
`,'             c-electric-semi&comma
`/'             c-electric-slash
`:'             c-electric-colon
`;'             c-electric-semi&comma
`<'             c-electric-lt-gt
`>'             c-electric-lt-gt
`{'             c-electric-brace
`}'             c-electric-brace
`backspace'     c-electric-backspace
`delete'        c-electric-delete
`return'        c-context-line-break
`tab'           c-indent-command
`C-c'           << Prefix Command >>
`C-i'           c-indent-command
`C-m'           c-context-line-break
`C-x'           << Prefix Command >>
`M-a'           c-beginning-of-statement
`M-c'           c-comment-edit-at-point
`M-e'           c-end-of-statement
`M-j'           c-indent-new-comment-line
`M-q'           c-fill-paragraph
`M-backspace'   backward-kill-word
`M-backward'    backward-kill-word
`M-delete'      backward-kill-word
`M-linefeed'    c-indent-new-comment-line
`M-C-h'         backward-kill-word
`M-C-j'         c-indent-new-comment-line
`M-C-q'         c-indent-exp
`M-C-kp-left'   c-beginning-of-statement
`M-C-kp-right'  c-end-of-statement
`M-C-left'      c-beginning-of-statement
`M-C-right'     c-end-of-statement
`C-c .'         c-set-style
`C-c C-\'       c-backslash-region
`C-c C-a'       c-toggle-auto-state
`C-c C-b'       c-submit-bug-report
`C-c C-c'       comment-region
`C-c C-d'       c-toggle-hungry-state
`C-c C-n'       c-forward-conditional
`C-c C-o'       c-set-offset
`C-c C-p'       c-backward-conditional
`C-c C-q'       c-indent-defun
`C-c C-s'       c-show-syntactic-information
`C-c C-t'       c-toggle-auto-hungry-state
`C-c C-u'       c-up-conditional
`C-x f'         c-fill-paragraph

   To configure this package, type:

       M-x customize-group RET javascript RET

* Menu:

* About JavaScript: about-javascript.


File: prog-modes.info,  Node: about-javascript,  Prev: javascript-mode,  Up: javascript-mode

11.1 About JavaScript
=====================

JavaScript is a compact, object-based scripting language for developing
client and server Internet applications.


File: prog-modes.info,  Node: ksh-mode,  Next: lua-mode,  Prev: javascript-mode,  Up: Top

12 Editing Shell Script (sh, ksh, bash) Code
********************************************

This mode is used for editing shell scripts written for the Bourne
(sh), Korn (ksh) or Bourne Again (bash) shells.  It is NOT
automatically invoked for any particular file extension.  To invoke
this mode while editing a file, type `M-x ksh-mode'.

   The following key mappings are defined:

`linefeed' reindent-then-newline-and-indent
`tab'      ksh-indent-line
`C-c'      << Prefix Command >>
`C-i'      ksh-indent-line
`C-j'      reindent-then-newline-and-indent
`M-tab'    ksh-complete-symbol
`M-C-i'    ksh-complete-symbol
`C-c tab'  ksh-completion-init-and-pickup
`C-c C-i'  ksh-completion-init-and-pickup

   The variables controlling indentation style are:

`ksh-indent'
     Indentation of ksh statements with respect to containing block.
     Default value is 2.

`ksh-case-indent'
     Additional indentation for statements under case items.  Default
     value is nil which will align the statements one position past the
     ")" of the pattern.

`ksh-case-item-offset'
     Additional indentation for case items within a case statement.
     Default value is 2.

`ksh-group-offset'
     Additional indentation for keywords "do" and "then".  Default
     value is -2.

`ksh-brace-offset'
     Additional indentation of "{" under functions or brace groupings.
     Default value is 0.

`ksh-multiline-offset'
     Additional indentation of line that is preceded of a line ending
     with a `\' to make it continue on next line.

`ksh-tab-always-indent'
     Controls the operation of the `TAB' key. If t (the default), always
     reindent the current line.  If nil, indent the current line only if
     point is at the left margin or in the line's indentation; otherwise
     insert a tab.

`ksh-match-and-tell'
     If non-nil echo in the minibuffer the matching compound command
     for the "done", "}", "fi", or "esac". Default value is t.

`ksh-align-to-keyword'
     Controls whether nested constructs align from the keyword or the
     current indentation. If non-nil, indentation will be relative to
     the column the keyword starts. If nil, indentation will be
     relative to the current indentation of the line the keyword is on.
     The default value is non-nil.

`ksh-comment-regexp'
     Regular expression used to recognize comments. Customize to support
     ksh-like languages. Default value is "\s *#".


   An example of how to set up this mode is as follows:

       (setq ksh-mode-hook
            (function (lambda ()
               (font-lock-mode 1)             ;; font-lock the buffer
               (setq ksh-indent 8)
     	  (setq ksh-group-offset -8)
     	  (setq ksh-brace-offset -8)
               (setq ksh-tab-always-indent t)
               (setq ksh-match-and-tell t)
               (setq ksh-align-to-keyword t)	;; Turn on keyword alignment
     	  )))

   To configure this package please view the source code.  This can be
done by typing `C-x 4 l ksh-mode'.

   For a related package, see `sh-script'.


File: prog-modes.info,  Node: lua-mode,  Next: m4-mode,  Prev: ksh-mode,  Up: Top

13 Editing Lua Code
*******************

This mode is used for editing Lua code.  It is automatically invoked for
buffers visiting any file ending in the extension `.lua'.

   To configure this mode, type:

       M-x customize-group RET lua RET

* Menu:

* About Lua: about-lua.


File: prog-modes.info,  Node: about-lua,  Prev: lua-mode,  Up: lua-mode

13.1 About Lua
==============

Lua is a powerful light-weight programming language designed for
extending applications.  Lua is also frequently used as a
general-purpose, stand-alone language.  More information on Lua can be
found at The Programming Language Lua (http://www.lua.org/).


File: prog-modes.info,  Node: m4-mode,  Next: make-mode,  Prev: lua-mode,  Up: Top

14 Editing m4 Code
******************

This mode is used for editing m4 macro definitions.  It is NOT
automatically invoked for any particular file extension.  To invoke
this mode while editing a file, type `M-x m4-mode'.

   The mode has most of the syntax right (i.e., sexp motion commands
work, but function motion commands don't).  It also sets up font-lock
for colorization.

   To configure this package please view the source code.  This can be
done by typing `C-x 4 l m4-mode'.

   NOTE: The preferred package for editing m4 code is autoconf mode.
*Note autoconf-mode::., for details.

* Menu:

* About m4: about-m4.


File: prog-modes.info,  Node: about-m4,  Prev: m4-mode,  Up: m4-mode

14.1 About m4
=============

m4 is a general purpose macro processor that can be used to preprocess
C and assembly language programs, among other things. Besides the
straightforward replacement of one string of text by another, m4 lets
you perform:

   * integer arithmetic

   * file inclusion

   * conditional macro expansion

   * string and substring manipulation



File: prog-modes.info,  Node: make-mode,  Next: mode-compile,  Prev: m4-mode,  Up: Top

15 Editing Makefiles
********************

This mode is used for editing Makefiles.  It is automatically invoked
for for buffers visiting the following types of files:

   * any file ending with an extension of `.ma?ke?' or `.am'

   * any file named `GNU[Mm]akefile' or `[Mm]akefile' with an extension
     of `.in'.

   * any file that has an interpretor line (the "shebang" line)
     specifying "make".


   The mode knows about Makefile syntax and defines `M-n' and `M-p' to
move to next and previous productions.

   The keys `$', `=', `:' and `.' are electric; they try to help you
fill in a macro reference, macro definition, ordinary target name, or
special target name, respectively.  Such names are completed using a
list of targets and macro names parsed out of the makefile.  This list
is automatically updated, if necessary, whenever you invoke one of these
commands.  You can force it to be updated with `C-c C-p'.

   The command `C-c C-f' adds certain filenames in the current
directory as targets.  You can filter out filenames by setting the
variable `makefile-ignored-files-in-pickup-regex'.

   The command `C-c C-u' grinds for a bit, then pops up a report buffer
showing which target names are up-to-date with respect to their
prerequisites, which targets are out-of-date, and which have no
prerequisites.

   The command `C-c C-b' pops up a browser window listing all target and
macro names.  You can mark or unmark items wit `C-c SPC', and insert all
marked items back in the Makefile with `C-c TAB'.

   The command `C-c TAB' in the makefile buffer inserts a GNU make
builtin.  You will be prompted for the builtin's args.

   The following key mappings are defined:

`C-c'         << Prefix Command >>
`M-n'         makefile-next-dependency
`M-p'         makefile-previous-dependency
`M-tab'       makefile-complete
`M-C-i'       makefile-complete
`C-c :'       makefile-insert-target-ref
`C-c tab'     makefile-insert-gmake-function
`C-c C-\'     makefile-backslash-region
`C-c C-b'     makefile-switch-to-browser
`C-c C-c'     comment-region
`C-c C-f'     makefile-pickup-filenames-as-targets
`C-c C-i'     makefile-insert-gmake-function
`C-c C-p'     makefile-pickup-everything
`C-c C-u'     makefile-create-up-to-date-overview

   In the browser, use the following keys:

`I'           makefile-browser-insert-selection-and-quit
`i'           makefile-browser-insert-selection
`n'           makefile-browser-next-line
`p'           makefile-browser-previous-line
`q'           makefile-browser-quit
`space'       makefile-browser-toggle
`C-c'         << Prefix Command >>
`C-n'         makefile-browser-next-line
`C-p'         makefile-browser-previous-line
`C-c return'  makefile-browser-insert-continuation
`C-c C-m'     makefile-browser-insert-continuation

   Makefile mode can be configured by modifying the following variables:

`makefile-browser-buffer-name:'
     Name of the macro- and target browser buffer.

`makefile-target-colon:'
     The string that gets appended to all target names inserted by
     `makefile-insert-target'.  ":" or "::" are quite common values.

`makefile-macro-assign:'
     The string that gets appended to all macro names inserted by
     `makefile-insert-macro'.  The normal value should be " = ", since
     this is what standard make expects.  However, newer makes such as
     dmake allow a larger variety of different macro assignments, so you
     might prefer to use " += " or " := " .

`makefile-tab-after-target-colon:'
     If you want a `TAB' (instead of a space) to be appended after the
     target colon, then set this to a non-nil value.

`makefile-browser-leftmost-column:'
     Number of blanks to the left of the browser selection mark.

`makefile-browser-cursor-column:'
     Column in which the cursor is positioned when it moves up or down
     in the browser.

`makefile-browser-selected-mark:'
     String used to mark selected entries in the browser.

`makefile-browser-unselected-mark:'
     String used to mark unselected entries in the browser.

`makefile-browser-auto-advance-after-selection-p:'
     If this variable is set to a non-nil value the cursor will
     automagically advance to the next line after an item has been
     selected in the browser.

`makefile-pickup-everything-picks-up-filenames-p:'
     If this variable is set to a non-nil value then
     `makefile-pickup-everything' also picks up filenames as targets
     (i.e. it calls `makefile-pickup-filenames-as-targets'), otherwise
     filenames are omitted.

`makefile-cleanup-continuations-p:'
     If this variable is set to a non-nil value then Makefile mode will
     assure that no line in the file ends with a backslash (the
     continuation character) followed by any whitespace.  This is done
     by silently removing the trailing whitespace, leaving the
     backslash itself intact.  IMPORTANT: Please note that enabling
     this option causes Makefile mode to MODIFY A FILE WITHOUT YOUR
     CONFIRMATION when "it seems necessary".

`makefile-browser-hook:'
     A function or list of functions to be called just before the
     browser is entered. This is executed in the makefile buffer.

`makefile-special-targets-list:'
     List of special targets. You will be offered to complete on one of
     those in the minibuffer whenever you enter a `.'.  at the
     beginning of a line in Makefile mode.


   To configure this package, type:

       M-x customize-group RET makefile RET

* Menu:

* About Make: about-make.


File: prog-modes.info,  Node: about-make,  Prev: make-mode,  Up: make-mode

15.1 About Make
===============

A Makefile is used by a `make' utility to automatically determine which
pieces of a large program need to be recompiled, and to issue the
commands to recompile them.  *Note Make: (make)Top., for details.


File: prog-modes.info,  Node: mode-compile,  Next: modula2,  Prev: make-mode,  Up: Top

16 Compiling Files According to Major-Mode
******************************************

The `compile' command is very rudimentary in its creation of its
compilation command, using "make -k" by default.  This package provides
an intelligent replacement for the `compile' command. *Note
Compilation: (xemacs)Compilation., for details.

   The `mode-compile' command functions as a layer above `compile'.
Its purpose is mainly to build a smarter compile command for `compile'
to execute. This compile command is built according to number of
parameters:

   * the major-mode

   * presence or absence of a makefile in the current directory

   * the `buffer-file-name' and extension

   * contents of the current buffer (`main' function, "#!/path/shell",
     ...)

   * and more ... (see below)


   Most of these parameters are highly customizable through Emacs Lisp
variables (to be set in your `user-init-file' or through the
Customization menu).  Running `mode-compile' after a universal-argument
(`C-u') allows remote compilations; the user is prompted for the host
name to execute the compilation command.  The `mode-compile-kill'
function terminates a running compilation session launched by
`mode-compile'.

   By default, `mode-compile' is very verbose and waits a user-specified
number of seconds after displaying each message to give the user time
to read it.  The variables `mode-compile-expert-p' and
`mode-compile-reading-time' can be used to change this behaviour.  On
Windows-based systems, the variable `mode-compile-other-frame-p' will
create a new frame and launch the compilation command in it.

* Menu:

* compile-cust::                Customization
* compile-compilation-mode::    compilation-mode
* compile-makefile-mode::       makefile-mode
* compile-emacs-lisp-mode::     emacs-lisp-mode, lisp-interaction-mode
* compile-dired-mode::          dired-mode
* compile-sh-mode::             sh-mode, csh-mode, zsh-mode
* compile-c?perl-mode::         c?perl-mode
* compile-tcl-mode::            tcl-mode
* compile-c-mode::              c-mode, c++-mode
* compile-ada-mode::            ada-mode
* compile-fortran-mode::        fortran-mode
* compile-java-mode::           java-mode
* compile-python-mode::         python-mode
* compile-message-mode::        message-mode
* compile-catchall::            Miscellaneous Modes


File: prog-modes.info,  Node: compile-cust,  Next: compile-compilation-mode,  Prev: mode-compile,  Up: mode-compile

16.1 Customization
==================

This section explains how the `compile-command' is built according to
the `major-mode' and how to customize it.  The major modes currently
supported are:

ada-mode                c++-mode                c-mode
c?perl-mode             compilation-mode        csh-mode
dired-mode              emacs-lisp-mode         fortran-mode
fundamental-mode        indented-text-mode      java-mode
lisp-interaction-mode   makefile-mode           python-mode
sh-mode                 tcl-mode                text-mode
zsh-mode                                        

   For other modes a default behaviour is provided.

   When running `mode-compile' or `mode-compile-kill' the hooks
`mode-compile-(before|after)-(compile|kill)-hook' are executed.  The
current buffer can be automatically saved if
`mode-compile-always-save-buffer-p' is set to `t'.  All the modified
buffers can be automatically saved if `mode-compile-save-all-p' is set
to `t'.

   To configure this package, type:

       M-x customize-group RET compilation RET


File: prog-modes.info,  Node: compile-compilation-mode,  Next: compile-makefile-mode,  Prev: compile-cust,  Up: mode-compile

16.2 compilation-mode
=====================

Calls `compile' with the last compile command.


File: prog-modes.info,  Node: compile-makefile-mode,  Next: compile-emacs-lisp-mode,  Prev: compile-compilation-mode,  Up: mode-compile

16.3 makefile-mode
==================

The makefile is run with make through `compile' (user is prompted for
the rule to run, see variable `mode-compile-preferred-default-makerule'
to see how a default choice could be selected).


File: prog-modes.info,  Node: compile-emacs-lisp-mode,  Next: compile-dired-mode,  Prev: compile-makefile-mode,  Up: mode-compile

16.4 emacs-lisp-mode, lisp-interaction-mode
===========================================

If the buffer is a `.el' file we `byte-compile' it to produce a `.elc'
file.  Otherwise, just `byte-compile' the buffer (this does not use
`compile' but `byte-compile').


File: prog-modes.info,  Node: compile-dired-mode,  Next: compile-sh-mode,  Prev: compile-emacs-lisp-mode,  Up: mode-compile

16.5 dired-mode
===============

Find a `makefile' in the directory and run make with it (like in
`makefile-mode'), else try to `byte-recompile' all `.el' files older
than their associated `.elc' files (unlike `byte-recompile-directory'
this is not recursive), finally if no `.el' files are present ask
compilation command to user by calling `default-compile'.  To find a
`makefile' a regexp is provided which name is
`mode-compile-makefile-regexp'.


File: prog-modes.info,  Node: compile-sh-mode,  Next: compile-c?perl-mode,  Prev: compile-dired-mode,  Up: mode-compile

16.6 sh-mode, csh-mode, zsh-mode
================================

Run "[cz]?sh" with debugging arguments as specified in
`[cz]?sh-dbg-flags' on the currently edited file.


File: prog-modes.info,  Node: compile-c?perl-mode,  Next: compile-tcl-mode,  Prev: compile-sh-mode,  Up: mode-compile

16.7 c?perl-mode
================

Run file with "perl -w" (can step through errors with compile's
`next-error' command).


File: prog-modes.info,  Node: compile-tcl-mode,  Next: compile-c-mode,  Prev: compile-c?perl-mode,  Up: mode-compile

16.8 tcl-mode
=============

Run file with "wish" (can step through errors with compile's
`next-error' command).


File: prog-modes.info,  Node: compile-c-mode,  Next: compile-ada-mode,  Prev: compile-tcl-mode,  Up: mode-compile

16.9 c-mode, c++-mode
=====================

First it tries to see if there is a `makefile' in the directory.
Makefiles to look for are specified by the variable
`mode-compile-makefile-regexp'.  If yes two cases could happen: there is
only one makefile so use it, or there is more than one (sometimes when
you need to write portable soft you could have some makefiles by system:
SunOs.make, HP.make ...), in that case prompt to user for choice (with
smart completion).  Once the makefile has been selected it extract the
rules from it and ask to user to choose a rule to make (with smart
completion, see variable `mode-compile-preferred-default-makerule' to
see how a default choice could be selected).

   There are some cases where no makefiles are present (YES I KNOW this
is bad practice but you sometimes have no need to write a Makefile). In
that case the function tries to build the most intelligent compilation
command by using the favourite user C/C++ compiler: value of
environment variable "CC" or "CXX" or first found, in the PATH, of
compilers specified in variable `cc-compilers-list' or
`c++-compilers-list'.  Then it looks for the environment variable
"CFLAGS" of "CXXFLAGS" to append to the compiler command, finds the
file to compile: <name-of-the-file-to-compiled>.(c|cc|C|cpp) (see *)
and asks for confirmation.  If you really trust mode-compile will build
the correct command and want to bypass confirmation you could set the
variable `mode-compile-never-edit-command-p' to `t'.


File: prog-modes.info,  Node: compile-ada-mode,  Next: compile-fortran-mode,  Prev: compile-c-mode,  Up: mode-compile

16.10 ada-mode
==============

Same as c/c++-mode but run Ada compiler on the Ada file.  There are no
companion file and no way to find a main function in Ada.


File: prog-modes.info,  Node: compile-fortran-mode,  Next: compile-java-mode,  Prev: compile-ada-mode,  Up: mode-compile

16.11 fortran-mode
==================

Same as c-mode but run Fortran compiler on .[Ff](or)? files.


File: prog-modes.info,  Node: compile-java-mode,  Next: compile-python-mode,  Prev: compile-fortran-mode,  Up: mode-compile

16.12 java-mode
===============

Same as c-mode but call "javac" without the -o option on .java files


File: prog-modes.info,  Node: compile-python-mode,  Next: compile-message-mode,  Prev: compile-java-mode,  Up: mode-compile

16.13 python-mode
=================

Run file with "python" (can step through errors with compile's
`next-error' command).


File: prog-modes.info,  Node: compile-message-mode,  Next: compile-catchall,  Prev: compile-python-mode,  Up: mode-compile

16.14 message-mode
==================

Run `message-send'.


File: prog-modes.info,  Node: compile-catchall,  Prev: compile-message-mode,  Up: mode-compile

16.15 Miscellaneous Modes
=========================

This handles `fundamental-mode', `text-mode', `indented-text-mode' and
any unknown modes.

   Try to guess what the file is by

   * Looking at its name and extension (see variable
     `mode-compile-filename-regexp-alist').

   * Looking at string "#!/path/shell" at first line to extract shell
     to run the script with (see variable `mode-compile-shell-alist').

   * Looking at a makefile in current directory.

   * Calling `compile' with the last compile command which is asked to
     be edited by user


   The `kill-compile' command is then bound dynamically (buffer-local).


File: prog-modes.info,  Node: modula2,  Next: old-c-mode,  Prev: mode-compile,  Up: Top

17 Editing Modula-2 Code
************************

This mode is used for editing Modula-2 code.  It is NOT automatically
invoked for any particular file extension.  To invoke this mode while
editing a file, type `M-x modula-2-mode'.

   The mode provides convenient abbrevs for Modula-2 keywords, knows
about the standard layout rules, and supports a native compile command.

   All control constructs of Modula-2 can be reached by typing C-c
followed by the first character of the construct.

   The following key mappings are defined:

C-c b begin             C-c c case
C-c d definition        C-c e else
C-c f for               C-c h header
C-c i if                C-c m module
C-c l loop              C-c o or
C-c p procedure         Control-c Control-w with
C-c r record            C-c s stdio
C-c t type              C-c u until
C-c v var               C-c w while
C-c x export            C-c y import
C-c { begin-comment     C-c } end-comment
C-c C-z suspend Emacs   C-c C-t toggle
C-c C-c compile         M-x m2-next-error
                        next-error
C-c C-l link            

   Following are some important variables:

`m2-indent'
     controls the number of spaces for each indentation.

`m2-compile-command'
     holds the command to compile a Modula-2 program.

`m2-link-command'
     holds the command to link a Modula-2 program.

   To configure this package, type:

       M-x customize-group RET modula2 RET

* Menu:

* About Modula-2: about-modula2.


File: prog-modes.info,  Node: about-modula2,  Prev: modula2,  Up: modula2

17.1 About Modula-2
===================

Modula-2 is a programming language developed by Niklaus Wirth at ETH in
Zurich, Switzerland in the late 70's. Wirth also developed Algol-W,
Pascal, Modula, and Oberon.

   Modula-2 corrects some of the deficiencies of Pascal. It is suitable
for learning programming, for large projects written and maintained in
the fashion of professional software engineers, and for real time
embedded systems. Modula-2 is small, expressive, easy to learn and to
read.


File: prog-modes.info,  Node: old-c-mode,  Next: p4,  Prev: modula2,  Up: Top

18 Editing C Code
*****************

This is a smart editing mode for C code.  It knows a lot about C syntax
and tries to position the cursor according to C layout conventions.
You can change the details of the layout style with option variables.

   The mode provides the following features:

   * Expression and list commands understand all C brackets.

   * Tab indents for C code.

   * Comments are delimited with /* ... */.

   * Paragraphs are separated by blank lines only.

   * Delete converts tabs to spaces as it moves back.

   The variables controlling indentation style are:

`c-tab-always-indent'
     Non-nil means TAB in C mode should always reindent the current
     line, regardless of where in the line point is when the TAB
     command is used.

`c-auto-newline'
     Non-nil means automatically newline before and after braces, and
     after colons and semicolons, inserted in C code.

`c-indent-level'
     Indentation of C statements within surrounding block.  The
     surrounding block's indentation is the indentation of the line on
     which the open-brace appears.

`c-continued-statement-offset'
     Extra indentation given to a substatement, such as the then-clause
     of an if or body of a while.

`c-continued-brace-offset'
     Extra indentation given to a brace that starts a substatement.
     This is in addition to c-continued-statement-offset.

`c-brace-offset'
     Extra indentation for line if it starts with an open brace.

`c-brace-imaginary-offset'
     An open brace following other text is treated as if it were this
     far to the right of the start of its line.

`c-argdecl-indent'
     Indentation level of declarations of C function arguments.

`c-label-offset'
     Extra indentation for line that is a label, or case or default.


   NOTE: This package has been obsoleted by the cc-mode package (*note
CC Mode: (cc-mode)Top.).  cc-mode can be quite slow, however, on large
files, even on fast machines.  This version works with no problems on
the XEmacs source code and is very very fast.

   To configure this package, type:

       M-x customize-group RET old-c RET


File: prog-modes.info,  Node: p4,  Next: pascal,  Prev: old-c-mode,  Up: Top

19 Integration with Perforce Version Control
********************************************

This package provides simple integration with Perforce Version Control.

   To use this package, add the following line to your `user-init-file':

       (load-library "p4")

   To configure this package, type:

       M-x customize-group RET p4 RET

* Menu:

* About Perforce: about-perforce.


File: prog-modes.info,  Node: about-perforce,  Prev: p4,  Up: p4

19.1 About Perforce
===================

The Perforce SCM System features comprehensive software configuration
management capabilities built around a scalable client/server
architecture. Requiring only TCP/IP, developers can access the Perforce
Server through a variety of Perforce clients (Windows GUI, Web, or
Command-Line). Perforce can be deployed quickly and easily, and requires
minimal administration1, even for large or distributed sites.

   More information on Perforce can be found at
`http://www.perforce.com/'.


File: prog-modes.info,  Node: pascal,  Next: php-mode,  Prev: p4,  Up: Top

20 Editing Pascal Code
**********************

This mode is used for editing Pascal code.  It is automatically invoked
for buffers visiting any file ending with an extension of `.pas'.

   The mode provides the following capabilities:

   * TAB indents for Pascal code.

   * Delete converts tabs to spaces as it moves back.

   * `pascal-complete-word' completes the word around current point
     with respect \ to position in code

   * `pascal-show-completions' shows all possible completions at this
     point.

   Other useful functions are:

`pascal-mark-defun'
     Mark function.

`pascal-insert-block'
     insert begin ... end;

`pascal-star-comment'
     insert (* ... *)

`pascal-comment-area'
     Put marked area in a comment, fixing nested comments.

`pascal-uncomment-area'
     Uncomment an area commented with `pascal-comment-area'.

`pascal-beg-of-defun'
     Move to beginning of current function.

`pascal-end-of-defun'
     Move to end of current function.

`pascal-goto-defun'
     Goto function prompted for in the minibuffer.

`pascal-outline'
     Enter pascal-outline-mode (see also pascal-outline).


   The variables controlling indentation/edit style are:

`pascal-indent-level'
     Indentation of Pascal statements with respect to containing block.

`pascal-case-indent'
     Indentation for case statements.

`pascal-auto-newline'
     Non-nil means automatically newline after semicolons and the
     punctuation mark after an end.

`pascal-tab-always-indent'
     Non-nil means TAB in Pascal mode should always reindent the
     current line, regardless of where in the line point is when the
     TAB command is used.

`pascal-auto-endcomments'
     Non-nil means a comment { ... } is set after the ends which ends
     cases and functions. The name of the function or case will be set
     between the braces.

`pascal-auto-lineup'
     List of contexts where auto lineup of :'s or ='s should be done.


   See also the user variables `pascal-type-keywords',
`pascal-start-keywords' and `pascal-separator-keywords'.

   Turning on Pascal mode calls the value of the variable
`pascal-mode-hook' with no args, if that value is non-nil.

   To configure this package, type:

       M-x customize-group RET pascal RET


File: prog-modes.info,  Node: php-mode,  Next: postscript,  Prev: pascal,  Up: Top

21 Editing PHP Code
*******************

PHP mode is a major mode for editing PHP source code.  It is
automatically invoked for buffers visiting the following files of files:

   * any file ending with one of the following extensions: `.phps',
     `.php3', `.php4'

   * any file ending with the extension `.phtml'

   * any file ending with the extension `.inc'

   The mode is an extension of cc-mode; thus it inherits all cc-mode's
navigation functionality (*note CC Mode: (cc-mode)Top.).  But it colors
according to the PHP grammar and indents according to the PEAR coding
guidelines.  It also includes a couple of handy IDE-type features such
as documentation search and a source and class browser.

   For colorization, turn on `global-font-lock' or add the following to
your `user-init-file':

       (add-hook 'php-mode-user-hook 'turn-on-font-lock)

   To use abbrev-mode, add lines like this to your `user-init-file':

       (add-hook 'php-mode-user-hook
         '(lambda () (define-abbrev php-mode-abbrev-table "ex" "extends")))

   To make php-mode compatible with html-mode, see
`http://php-mode.sourceforge.net/'.

   To configure this package, type:

       M-x customize-group RET php RET

* Menu:

* About PHP: about-php.


File: prog-modes.info,  Node: about-php,  Prev: php-mode,  Up: php-mode

21.1 About PHP
==============

PHP is a widely-used general-purpose scripting language that is
especially suited for Web development and can be embedded into HTML.
For more information, see `http://www.php.net/'.


File: prog-modes.info,  Node: postscript,  Next: prolog,  Prev: php-mode,  Up: Top

22 Editing PostScript Programs
******************************

This mode is used for editing PostScript programs.  It is automatically
invoked for buffers visiting any file ending with an extension of `.cps'
or `.ps'.

   `C-c C-c' will send the contents of the buffer to the NeWS server
using psh(1).  `C-c |' sends the current region.  `C-c !' starts an
interactive psh(1) window which will be used for subsequent `C-c C-c' or
`C-c |' commands.

   In this mode, `TAB' and `M-C-\' attempt to indent code based on the
position of {}, [], and begin/end pairs.  The variable
`ps-indent-level' controls the amount of indentation used inside arrays
and begin/end pairs.

   The following key mappings are defined:

`tab'      ps-tab
`C-c'      << Prefix Command >>
`C-i'      ps-tab
`C-c !'    ps-shell
`C-c |'    ps-execute-region
`C-c C-c'  ps-execute-buffer

   `M-x postscript-mode' calls the value of the variable
`postscript-mode-hook' with no args, if that value is non-nil.

   To configure this package please view the source code.  This can be
done by typing `C-x 4 l postscript'.

* Menu:

* About PostScript: about-postscript.


File: prog-modes.info,  Node: about-postscript,  Prev: postscript,  Up: postscript

22.1 About PostScript
=====================

PostScript is a programming language optimized for printing graphics
and text (whether on paper, film, or CRT is immaterial). In the jargon
of the day, it is a page description language. It was introduced by
Adobe in 1985 and first (to my knowledge) appeared in the Apple
LaserWriter. The main purpose of PostScript was to provide a convenient
language in which to describe images in a device independent manner.
This device independence means that the image is described without
reference to any specific device features (e.g. printer resolution) so
that the same description could be used on any PostScript printer (say,
a LaserWriter or a Linotron) without modification.


File: prog-modes.info,  Node: prolog,  Next: rexx-mode,  Prev: postscript,  Up: Top

23 Editing and Running Prolog Code
**********************************

This mode is used for editing Prolog code.  It is automatically invoked
for buffers visiting any file ending with an of extension `.prolog'.

   The mode knows about Prolog syntax and comments, and can send
regions to an inferior Prolog interpreter process.

   Blank lines and `%%...' separate paragraphs.  `%'s start comments.

   The following key mappings are defined:

`tab'    prolog-indent-line
`C-i'    prolog-indent-line
`M-C-x'  prolog-consult-region

   Entry to this mode calls the value of `prolog-mode-hook' if that
value is non-nil.

   To configure this package, type:

       M-x customize-group RET prolog RET


File: prog-modes.info,  Node: rexx-mode,  Next: rpm-spec-mode,  Prev: prolog,  Up: Top

24 Editing REXX Code
********************

This mode is used for editing REXX code.  It is automatically invoked
for buffers visiting the following types of files:

   * any file ending with an extension of `.rexx'.

   * any file that has an interpretor line (the "shebang" line)
     specifying "rexx".

   The following key mappings are defined:

`backspace'  backward-delete-char-untabify
`return'     rexx-indent-and-newline
`tab'        rexx-indent-command
`C-c'        << Prefix Command >>
`C-i'        rexx-indent-command
`C-m'        rexx-indent-and-newline
`C-c C-c'    rexx-debug
`C-c C-p'    rexx-find-matching-do

   The following variables control indentation style:

`rexx-indent'
     The basic indentation for do-blocks.

`rexx-end-indent'
     The relative offset of the \"end\" statement. 0 places it in the
     same column as the statements of the block. Setting it to the same
     value as rexx-indent places the \"end\" under the do-line.

`rexx-cont-indent'
     The indention for lines following \"then\", \"else\" and \",\"
     (continued) lines.

`rexx-tab-always-indent'
     Non-nil means TAB in REXX mode should always reindent the current
     line, regardless of where in the line the point is when the TAB
     command is used.


   If you have set `rexx-end-indent' to a nonzero value, you probably
want to remap `RETURN' to `rexx-indent-newline-indent'. It makes sure
that lines indents correctly when you press `RETURN'.

   An extensive abbreviation table consisting of all the keywords of
REXX are supplied.  Expanded keywords are converted into upper case
making it easier to distinguish them.  To use this feature the buffer
must be in `abbrev-mode'. (See example below.)

   Turning on REXX mode calls the value of the variable `rexx-mode-hook'
with no args, if that value is non-nil.

   For example:

       (setq rexx-mode-hook '(lambda ()
                               (setq rexx-indent 4)
                               (setq rexx-end-indent 4)
                               (setq rexx-cont-indent 4)
                               (local-set-key \"\\C-m\" 'rexx-indent-newline-indent)
                               (abbrev-mode 1)
                               ))

   will make the END aligned with the DO/SELECT.  It will indent blocks
and IF-statements four steps and make sure that the END jumps into the
correct position when RETURN is pressed.  Finally it will use the
abbrev table to convert all REXX keywords into upper case.

   To configure this package, type:

       M-x customize-group RET rexx RET

* Menu:

* About REXX: about-rexx.


File: prog-modes.info,  Node: about-rexx,  Prev: rexx-mode,  Up: rexx-mode

24.1 About REXX
===============

REXX is a programming language designed by Michael Cowlishaw of IBM UK
Laboratories.  Rexx is an acronym which stands for "Restructured
Extended Executor Language".  In Mike's own words: "REXX is a
procedural language that allows programs and algorithms to be written
in a clear and structured way."


File: prog-modes.info,  Node: rpm-spec-mode,  Next: simula,  Prev: rexx-mode,  Up: Top

25 Editing RPM Spec Files
*************************

This mode is used for editing spec files for building RPM packages.  It
is automatically invoked for buffers visiting any file ending with an
extension of `.spec?'  or `.spec.in'.

   The mode much like C mode except for the syntax of comments.  It
uses the same keymap as C mode and has the same variables for
customizing indentation.  It has its own abbrev table and its own
syntax table. *Note CC Mode: (cc-mode)Top., for details.

   Turning on RPM spec mode calls the value of the variable
`rpm-spec-mode-hook' with no args, if that value is non-nil.

   To configure this package, type:

       M-x customize-group RET rpm-spec RET

* Menu:

* About RPM: about-rpm.


File: prog-modes.info,  Node: about-rpm,  Prev: rpm-spec-mode,  Up: rpm-spec-mode

25.1 About RPM
==============

The RPM Package Manager (RPM) is a powerful command line driven package
management system capable of installing, uninstalling, verifying,
querying, and updating computer software packages. Each software
package consists of an archive of files along with information about
the package like its version, a description, and the like. There is
also a related API ("Application Program Interface"), permitting
advanced developers to bypass 'shelling out' to a command line, and to
manage such transactions from within a native coding language.

   For more information, see `http://www.rpm.org/'.


File: prog-modes.info,  Node: simula,  Next: sql,  Prev: rpm-spec-mode,  Up: Top

26 Editing SIMULA 87 Code
*************************

This mode is used for editing SIMULA code.  It is NOT automatically
invoked for any particular file extension.  To invoke this mode while
editing a file, type `M-x simula-mode'.

   The mode knows about Simula syntax and standard indentation
commands.  It also provides convenient abbrevs for Simula keywords.

   The following key mappings are defined:

`:'        simula-electric-label
`tab'      simula-indent-command
`C-c'      << Prefix Command >>
`C-i'      simula-indent-command
`C-c C-d'  simula-forward-down-level
`C-c C-n'  simula-next-statement
`C-c C-p'  simula-previous-statement
`C-c C-u'  simula-backward-up-level

   The following variables controlling indentation style:

`simula-tab-always-indent'
     Non-nil means TAB in SIMULA mode should always reindent the
     current line, regardless of where in the line point is when the
     TAB command is used.

`simula-indent-level'
     Indentation of SIMULA statements with respect to containing block.

`simula-substatement-offset'
     Extra indentation after DO, THEN, ELSE, WHEN and OTHERWISE.

`simula-continued-statement-offset'
     Extra indentation for lines not starting a statement or
     substatement, e.g. a nested FOR-loop.  If value is a list, each
     line in a multiple- line continued statement will have the car of
     the list extra indentation with respect to the previous line of
     the statement.

`simula-label-offset -4711'
     Offset of SIMULA label lines relative to usual indentation.

`simula-if-indent '(0 . 0)'
     Extra indentation of THEN and ELSE with respect to the starting IF.
     Value is a cons cell, the car is extra THEN indentation and the cdr
     extra ELSE indentation.  IF after ELSE is indented as the starting
     IF.

`simula-inspect-indent '(0 . 0)'
     Extra indentation of WHEN and OTHERWISE with respect to the
     corresponding INSPECT.  Value is a cons cell, the car is extra
     WHEN indentation and the cdr extra OTHERWISE indentation.

`simula-electric-indent nil'
     If this variable is non-nil, `simula-indent-line' will check the
     previous line to see if it has to be reindented.

`simula-abbrev-keyword 'upcase'
     Determine how SIMULA keywords will be expanded.  Value is one of
     the symbols `upcase', `downcase', `capitalize', (as in)
     `abbrev-table', or nil if they should not be changed.

`simula-abbrev-stdproc 'abbrev-table'
     Determine how standard SIMULA procedure and class names will be
     expanded. Value is one of the symbols `upcase', `downcase',
     `capitalize', (as in) `abbrev-table', or nil if they should not be
     changed.


   Turning on SIMULA mode calls the value of the variable
`simula-mode-hook' with no arguments, if that value is non-nil.

   Warning: `simula-mode-hook' should not read in an abbrev file without
calling the function `simula-install-standard-abbrevs' afterwards,
preferably not at all.

   To configure this package, type:

       M-x customize-group RET simula RET

* Menu:

* About SIMULA: about-simula.


File: prog-modes.info,  Node: about-simula,  Prev: simula,  Up: simula

26.1 About SIMULA
=================

The SIMULA programming language was designed and built by Ole-Johan
Dahl and Kristen Nygaard at the Norwegian Computing Center (NCC) in
Oslo between 1962 and 1967. It was originally designed and implemented
as a language for discrete event simulation, but was later extended and
reimplemented as a full scale general purpose programming language.

   For more information, see
`http://www.engin.umd.umich.edu/CIS/course.des/cis400/simula/simula.html'.


File: prog-modes.info,  Node: sql,  Next: tcl,  Prev: simula,  Up: Top

27 Specialized Mode for SQL Interpreters
****************************************

This package provides a `sql-mode' and a `sql-interactive-mode'.  The
goals were two simple modes providing syntactic highlighting.  The
interactive mode had to provide a command-line history; the other mode
had to provide "send region/buffer to SQL interpreter" functions.
"simple" in this context means easy to use, easy to maintain and little
or no bells and whistles.

   `sql-interactive-mode' is used to interact with a SQL interpreter
process in a SQLi buffer (usually called `*SQL*').  The SQLi buffer is
created by calling a SQL interpreter-specific entry function.  Do _not_
call `sql-interactive-mode' by itself.

   The list of currently supported interpreters and the corresponding
entry function used to create the SQLi buffers is shown with `M-x
sql-help'.

   Since `sql-interactive-mode' is built on top of the general
command-interpreter-in-a-buffer mode (comint mode), it shares a common
base functionality, and a common set of bindings, with all modes
derived from comint mode.  This makes these modes easier to use.

   `sql-mode' can be used to keep editing SQL statements.  The SQL
statements can be sent to the SQL process in the SQLi buffer.

   For documentation on the functionality provided by comint mode, and
the hooks available for customizing it, see the file `comint.el'.

   Hint for newbies: take a look at `dabbrev-expand', `abbrev-mode',
and `imenu-add-menubar-index'.

   To configure this package, type:

       M-x customize-group RET SQL RET


File: prog-modes.info,  Node: tcl,  Next: teco,  Prev: sql,  Up: Top

28 Editing Tcl Code
*******************

This mode is used to edit Tcl code.  The mode is automatically invoked
for buffers visiting the following types of files:

   * any file ending with an extension of `.tcl' or `.exp'.

   * any file that has an interpretor line (the "shebang" line)
     specifying "scope", "wish", "tcl", "tclsh", or "expect".

   The mode provides the following capabilities:

   * Expression and list commands understand all Tcl brackets.

   * Tab indents for Tcl code.

   * Paragraphs are separated by blank lines only.

   * Delete converts tabs to spaces as it moves back.

   The variables controlling indentation style are:

`tcl-indent-level'
     Indentation of Tcl statements within surrounding block.

`tcl-continued-indent-level'
     Indentation of continuation line relative to first line of command.


   The variables controlling user interaction with mode (see variable
documentation for details) are:

`tcl-tab-always-indent'
     Controls action of TAB key.

`tcl-auto-newline'
     Non-nil means automatically newline before and after braces,
     brackets, and semicolons inserted in Tcl code.

`tcl-electric-hash-style'
     Controls action of `#' key.

`tcl-use-hairy-comment-detector'
     If t, use more complicated, but slower, comment detector.  This
     variable is only used in Emacs 19.

`tcl-use-smart-word-finder'
     If not nil, use a smarter, Tcl-specific way to find the current
     word when looking up help on a Tcl command.


   Turning on Tcl mode calls the value of the variable `tcl-mode-hook'
with no args, if that value is non-nil.  Read the documentation for
`tcl-mode-hook' to see what kinds of interesting hook functions already
exist.

   The following key mappings are defined:

`#'            tcl-electric-hash
`;'            tcl-electric-char
`['            tcl-electric-char
`]'            tcl-electric-char
`{'            tcl-electric-char
`}'            tcl-electric-brace
`delete'       backward-delete-char-untabify
`tab'          tcl-indent-command
`C-c'          << Prefix Command >>
`C-i'          tcl-indent-command
`M-;'          tcl-indent-for-comment
`M-backspace'  tcl-mark-defun
`M-C-a'        tcl-beginning-of-defun
`M-C-e'        tcl-end-of-defun
`M-C-h'        tcl-mark-defun
`M-C-q'        indent-tcl-exp
`M-C-x'        tcl-eval-defun
`C-c tab'      tcl-help-on-word
`C-c C-b'      tcl-submit-bug-report
`C-c C-c'      comment-region
`C-c C-f'      tcl-load-file
`C-c C-i'      tcl-help-on-word
`C-c C-s'      switch-to-tcl
`C-c C-t'      inferior-tcl
`C-c C-v'      tcl-eval-defun
`C-c C-x'      tcl-eval-region

   To configure this package, type:

       M-x customize-group RET tcl RET

* Menu:

* About Tcl: about-tcl.


File: prog-modes.info,  Node: about-tcl,  Prev: tcl,  Up: tcl

28.1 About Tcl
==============

Tcl (Tool Command Language) is used by over half a million developers
worldwide and has become a critical component in thousands of
corporations. It has a simple and programmable syntax and can be either
used as a standalone application or embedded in application programs.
Best of all, Tcl is open source so it's completely free.

   Tk is a graphical user interface toolkit that makes it possible to
create powerful GUIs incredibly quickly. It proved so popular that it
now ships with all distributions of Tcl.

   For more information, see `http://www.tcl.tk/software/tcltk/'.


File: prog-modes.info,  Node: teco,  Next: uil-mode,  Prev: tcl,  Up: Top

29 Teco Interpreter
*******************

This package implements a Teco Interpreter.

   To configure this package please view the source code.  This can be
done by typing `C-x 4 l teco'.


File: prog-modes.info,  Node: uil-mode,  Next: verilog-mode,  Prev: teco,  Up: Top

30 Editing Motif UIL Code
*************************

This mode is used to edit Motif UIL files.  It is automatically invoked
for buffers visiting any file ending with an extension of `.uil'.

   This mode is much like C mode except for the syntax of comments.  It
uses the same keymap as C mode and has the same variables for
customizing indentation.  It has its own abbrev table and its own
syntax table. *Note CC Mode: (cc-mode)Top., for details.

   Turning on uilmode calls the value of the variable `uil-mode-hook'
with no args, if that value is non-nil.

   To configure this package please view the source code.  This can be
done by typing `C-x 4 l uil-mode'.

* Menu:

* About UIL: about-uil.


File: prog-modes.info,  Node: about-uil,  Prev: uil-mode,  Up: uil-mode

30.1 About UIL
==============

The Motif user interface language (UIL) is a specification language for
describing the initial state of a Motif application's user interface.


File: prog-modes.info,  Node: verilog-mode,  Next: vrml-mode,  Prev: uil-mode,  Up: Top

31 Editing Verilog HDL Source
*****************************

This mode is used to edit Verilog source files.  It is automatically
invoked for buffers visiting any file ending with one of the following
extensions: `.vh?', `.dv', `.vlog', and `.verilog'.

   The mode provides the following features:

   * NEWLINE, TAB indents for Verilog code.

   * Delete converts tabs to spaces as it moves back.

   * Supports highlighting.

   The variables controlling indentation/edit style are:

`verilog-indent-level'
     Indentation of Verilog statements with respect to containing block.

`verilog-indent-level-module'
     Absolute indentation of Module level Verilog statements.  Set to 0
     to get initial and always statements lined up on the left side of
     your screen.

`verilog-indent-level-declaration'
     Indentation of declarations with respect to containing block.  Set
     to 0 to get them list right under containing block.

`verilog-indent-level-behavioral'
     Indentation of first begin in a task or function block Set to 0 to
     get such code to lined up underneath the task or function keyword

`verilog-indent-level-directive'
     Indentation of `ifdef/`endif blocks

``verilog-cexp-indent'
     Indentation of Verilog statements broken across lines i.e.:
            if (a)
             begin

`verilog-case-indent'
     Indentation for case statements.

`verilog-auto-newline'
     Non-nil means automatically newline after semicolons and the
     punctuation mark after an end.

`verilog-auto-indent-on-newline'
     Non-nil means automatically indent line after newline

`verilog-tab-always-indent'
     Non-nil means TAB in Verilog mode should always reindent the
     current line, regardless of where in the line point is when the
     TAB command is used.

`verilog-indent-begin-after-if'
     Non-nil means to indent begin statements following a preceding if,
     else, while, for and repeat statements, if any.  otherwise, the
     begin is lined up with the preceding token.  If t, you get:
            if (a)
               begin // amount of indent based on `verilog-cexp-indent'

     otherwise you get:
            if (a)
            begin

`verilog-auto-endcomments'
     Non-nil means a comment /* ... */ is set after the ends which ends
     cases, tasks, functions and modules.  The type and name of the
     object will be set between the braces.

`verilog-minimum-comment-distance'
     Minimum distance (in lines) between begin and end required before
     a comment will be inserted.  Setting this variable to zero results
     in every end acquiring a comment; the default avoids too many
     redundant comments in tight quarters.

`verilog-auto-lineup'
     List of contexts where auto lineup of :'s or ='s should be done.


   Turning on Verilog mode calls the value of the variable
`verilog-mode-hook' with no args, if that value is non-nil.

   Other useful functions are:

`verilog-complete-word'
     complete word with appropriate possibilities (functions, verilog
     keywords...)

`verilog-comment-region'
     Put marked area in a comment, fixing nested comments.

`verilog-uncomment-region'
     Uncomment an area commented with `verilog-comment-region'.

`verilog-insert-block'
     insert begin ... end;

`verilog-star-comment'
     insert /* ... */

`verilog-mark-defun'
     Mark function.

`verilog-beg-of-defun'
     Move to beginning of current function.

`verilog-end-of-defun'
     Move to end of current function.

`verilog-label-be'
     Label matching begin ... end, fork ... join and case ... endcase
     statements

`verilog-sk-always'
     Insert a always @(AS) begin .. end block

`verilog-sk-begin'
     Insert a begin .. end block

`verilog-sk-case'
     Insert a case block, prompting for details

`verilog-sk-else'
     Insert an else begin .. end block

`verilog-sk-for'
     Insert a for (...) begin .. end block, prompting for details

`verilog-sk-generate'
     Insert a generate .. endgenerate block

`verilog-sk-header'
     Insert a nice header block at the top of file

`verilog-sk-initial'
     Insert an initial begin .. end block

`verilog-sk-fork'
     Insert a fork begin .. end .. join block

`verilog-sk-module'
     Insert a module .. (/*AUTOARG*/);.. endmodule block

`verilog-sk-primitive'
     Insert a primitive .. (.. );.. endprimitive block

`verilog-sk-repeat'
     Insert a repeat (..) begin .. end block

`verilog-sk-specify'
     Insert a specify .. endspecify block

`verilog-sk-task'
     Insert a task .. begin .. end endtask block

`verilog-sk-while'
     Insert a while (...) begin .. end block, prompting for details

`verilog-sk-casex'
     Insert a casex (...) item: begin.. end endcase block, prompting
     for details

`verilog-sk-casez'
     Insert a casez (...) item: begin.. end endcase block, prompting
     for details

`verilog-sk-if'
     Insert an if (..) begin .. end block

`verilog-sk-else-if'
     Insert an else if (..) begin .. end block

`verilog-sk-comment'
     Insert a comment block

`verilog-sk-assign'
     Insert an assign .. = ..; statement

`verilog-sk-function'
     Insert a function .. begin .. end endfunction block

`verilog-sk-input'
     Insert an input declaration, prompting for details

`verilog-sk-output'
     Insert an output declaration, prompting for details

`verilog-sk-state-machine'
     Insert a state machine definition, prompting for details!

`verilog-sk-inout'
     Insert an inout declaration, prompting for details

`verilog-sk-wire'
     Insert a wire declaration, prompting for details

`verilog-sk-reg'
     Insert a register declaration, prompting for details"


   To configure this package, type:

       M-x customize-group RET verilog-mode RET

* Menu:

* About Verilog: about-verilog.


File: prog-modes.info,  Node: about-verilog,  Prev: verilog-mode,  Up: verilog-mode

31.1 About Verilog
==================

Verilog HDL is a hardware description language used to design and
document electronic systems. Verilog HDL allows designers to design at
various levels of abstraction. It is the most widely used HDL with a
user community of more than 50,000 active designers.

   For more information, see `http://www.verilog.com/'.


File: prog-modes.info,  Node: vrml-mode,  Next: XEmacs License,  Prev: verilog-mode,  Up: Top

32 Editing VRML (.wrl) Files
****************************

This mode is used for editing VRML files.  It is automatically invoked
for buffers visiting any file ending with an extension of `.wrl'.

   The mode has the following features:

   * Expression and list commands understand all VRML brackets.

   * Tab indents for VRML code.

   * Paragraphs are separated by blank lines only.

   * Delete converts tabs to spaces as it moves back.


   The variables controlling indentation style are:

`vrml-indent-level'
     Indentation of VRML statements within surrounding block.


   The variables controlling user interaction with mode (see variable
documentation for details) are:

`vrml-tab-always-indent'
     Controls action of TAB key.

`vrml-auto-newline'
     Non-nil means automatically newline before and after braces
     inserted in VRML code.


   Turning on VRML mode calls the value of the variable `vrml-mode-hook'
with no args, if that value is non-nil.  Read the documentation for
`vrml-mode-hook' to see what kinds of interesting hook functions already
exist.

   To configure this package, type:

       M-x customize-group RET vrml RET


File: prog-modes.info,  Node: XEmacs License,  Prev: vrml-mode,  Up: Top

33 XEmacs License
*****************

GNU GENERAL PUBLIC LICENSE
**************************

                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     675 Mass Ave, Cambridge, MA 02139, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

The licenses for most software are designed to take away your freedom
to share and change it.  By contrast, the GNU General Public License is
intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY
 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS
How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR

     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.  This is free software, and you are welcome
     to redistribute it under certain conditions; type `show c'
     for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright
     interest in the program `Gnomovision'
     (which makes passes at compilers) written
     by James Hacker.

     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.



Tag Table:
Node: Top218
Node: Copying3067
Node: asm-mode7216
Node: autoconf-mode8361
Node: about-autoconf8943
Node: awk-mode9484
Node: about-awk10401
Node: cl-indent10608
Node: cvs11143
Node: about-cvs12189
Node: diff-mode12459
Node: eiffel13740
Node: about-eiffel14624
Node: icon15027
Node: about-icon17229
Node: javascript-mode17715
Node: about-javascript20137
Node: ksh-mode20392
Node: lua-mode23537
Node: about-lua23903
Node: m4-mode24265
Node: about-m424977
Node: make-mode25420
Node: about-make31014
Node: mode-compile31330
Node: compile-cust33760
Node: compile-compilation-mode34937
Node: compile-makefile-mode35158
Node: compile-emacs-lisp-mode35527
Node: compile-dired-mode35920
Node: compile-sh-mode36498
Node: compile-c?perl-mode36794
Node: compile-tcl-mode37038
Node: compile-c-mode37272
Node: compile-ada-mode38890
Node: compile-fortran-mode39172
Node: compile-java-mode39397
Node: compile-python-mode39627
Node: compile-message-mode39878
Node: compile-catchall40064
Node: modula240802
Node: about-modula242370
Node: old-c-mode42943
Node: p445154
Node: about-perforce45620
Node: pascal46213
Node: php-mode48545
Node: about-php49874
Node: postscript50163
Node: about-postscript51386
Node: prolog52192
Node: rexx-mode52979
Node: about-rexx55670
Node: rpm-spec-mode56082
Node: about-rpm56898
Node: simula57607
Node: about-simula60762
Node: sql61326
Node: tcl62967
Node: about-tcl65761
Node: teco66438
Node: uil-mode66704
Node: about-uil67492
Node: verilog-mode67741
Node: about-verilog73599
Node: vrml-mode74042
Node: XEmacs License75297

End Tag Table
