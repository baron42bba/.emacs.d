;;; xbm-button.el --- Create XBM text buttons under XEmacs

;; Copyright (C) 1997 Free Software Foundation, Inc.
;; Copyright (C) 1995 Kyle E. Jones

;; Author: Kyle Jones
;; Maintainer: XEmacs Development Team
;; Keywords: frames, internal

;; This file is part of XEmacs.

;; XEmacs is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 1, or (at your option)
;; any later version.

;; XEmacs is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;; Synched up with: Not in FSF.

;;; Commentary:

;;; Send bug reports to kyle@wonderworks.com

;;; The sole interface function is xbm-button-create.

;;; Code:

(provide 'xbm-button)

(defvar xbm-button-version "1.00"
  "Version string for xbm-button.")

(defvar xbm-button-vertical-padding 3
  "Number of pixels between the text and the top/bottom of the button.")

(defvar xbm-button-horizontal-padding 3
  "Number of pixels between the text and the left/right edges of the button.")

(defvar xbm-button-font-pixel-lines
  '(

"000011000000110011000110001100110001100011000110011000110011000110001100001100011000000110001100010000110000000111000111000111000010001100011000110001100110001100001100011001100011011011011001100001000110000010001100011000100011000100001100010011000111000000000011000000000000000000110000000000110100000000001100000001100011001100000001100000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000100100111001100110110011000111000111100010011011111101100110110011010000000001100011000010000010100110111001101111000000010000011001000010101000100010000000000000000000000000000000001100001100001100110000000011010100000000000000000000000101100110110000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"







"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111000000000000000011000000000000000000000000000000000000000000000011000000000001100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000100010000000000000000000000000000000001100001100001100110001000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"


   )
  "List of strings representing pixel lines for the button font.")

(defvar xbm-button-font-line-indices
  '(("A" 0 10)
    ("B" 11 19)
    ("C" 20 28)
    ("D" 29 38)
    ("E" 39 47)
    ("F" 48 56)
    ("G" 57 66)
    ("H" 67 77)
    ("I" 78 82)
    ("J" 83 90)
    ("K" 91 100)
    ("L" 101 109)
    ("M" 110 121)
    ("N" 122 132)
    ("O" 133 142)
    ("P" 143 151)
    ("Q" 152 162)
    ("R" 163 172)
    ("S" 173 180)
    ("T" 181 189)
    ("U" 190 199)
    ("V" 200 210)
    ("W" 211 224)
    ("X" 225 234)
    ("Y" 235 243)
    ("Z" 244 252)
    ("a" 253 260)
    ("b" 261 269)
    ("c" 270 276)
    ("d" 277 285)
    ("e" 286 292)
    ("f" 293 298)
    ("g" 299 306)
    ("h" 307 315)
    ("i" 316 320)
    ("j" 321 324)
    ("k" 325 333)
    ("l" 334 338)
    ("m" 339 351)
    ("n" 352 360)
    ("o" 361 368)
    ("p" 369 377)
    ("q" 378 386)
    ("r" 387 393)
    ("s" 394 399)
    ("t" 400 405)
    ("u" 406 414)
    ("v" 415 423)
    ("w" 424 436)
    ("x" 437 444)
    ("y" 445 453)
    ("z" 454 460)
    ("0" 461 467)
    ("1" 468 472)
    ("2" 473 479)
    ("3" 480 486)
    ("4" 487 493)
    ("5" 494 500)
    ("6" 501 507)
    ("7" 508 514)
    ("8" 515 521)
    ("9" 522 528)
    ("`" 529 531)
    ("~" 532 538)
    ("!" 539 541)
    ("@" 542 552)
    ("#" 553 560)
    ("$" 561 567)
    ("%" 568 580)
    ("^" 581 586)
    ("&" 587 597)
    ("*" 598 603)
    ("(" 604 608)
    (")" 609 613)
    ("-" 614 620)
    ("_" 621 628)
    ("=" 629 635)
    ("+" 636 643)
    ("[" 644 648)
    ("{" 649 653)
    ("]" 654 658)
    ("}" 659 663)
    (";" 664 666)
    (":" 667 669)
    ("'" 670 672)
    ("\"" 673 676)
    ("," 677 679)
    ("<" 680 686)
    ("." 687 689)
    (">" 690 696)
    ("/" 697 700)
    ("?" 701 707)
    ("\\" 708 713)
    ("|" 714 715)
    (" " 716 719))
  "Indices into the xbm-button-font-pixel-lines strings for each character.
Format is
  (STR START END)
STR contains the character.
START is where the character's pixels start in each string of
   xbm-button-font-pixel-lines (0 is the index of the first pixel).
END is the index of the position after the last pixel of the character.")

(defun xbm-bit-lines-to-xbm-bits (&optional beg end)
  "Convert lines of bits to a string of chars containing the bits,
plus width and height information.  A list of the form
   (WIDTH HEIGHT STRING)
is returned.  WIDTH is set to be the length of the first line,
ignoring the newline.  HEIGHT is the number of lines in the region.

BEG and END specify the region containing the bit lines.  Each
line should contain only the characters '0' or '1' and be
terminated by a newline."
  (or beg (setq beg (point-min)))
  (or end (setq end (point-max)))
  (let (octet octet-count bit-count b char width height)
    (save-excursion
      (save-excursion
	(set-buffer (setq b (get-buffer-create
			     " xbm-button-bit-lines-to-xbm")))
	(erase-buffer))
      (goto-char beg)
      (setq bit-count 0
	    height 0
	    width (- (save-excursion (end-of-line) (point)) (point))
	    octet 0)
      (while (< (point) end)
	(setq char (char-after (point)))
	(cond ((= char ?0)
	       (setq bit-count (1+ bit-count)))
	      ((= char ?1)
	       ;; least significant bit of octet is leftmost pixel.
	       (setq octet (+ octet (expt 2 bit-count))
		     bit-count (1+ bit-count)))
	      ((= char ?\n)
	       (setq height (1+ height))))
	;; output octet whenever we have retrieved 8 bits or when
	;; a newline is encountered.
	(cond ((or (= bit-count 8) (= char ?\n))
	       (save-excursion
		 (set-buffer b)
		 (insert-char octet))
	       (setq bit-count 0
		     octet 0)))
	(forward-char 1))
      (set-buffer b)
      ;; otput last octet if any bits collected.
      (cond ((not (= bit-count 0))
	     (insert-char octet)))

      (list width height (buffer-substring nil nil b)) )))

;;;###autoload
(defun xbm-button-create (text border-thickness)
  "Returns a list of XBM image instantiators for a button displaying TEXT.
The list is of the form
   (UP DOWN DISABLED)
where UP, DOWN, and DISABLED are the up, down and disabled image
instantiators for the button.

BORDER-THICKNESS specifies how many pixels should be used for the
borders on the edges of the buttons.  It should be a positive integer,
or 0 to mean no border."
  (save-excursion
    (set-buffer (get-buffer-create " xbm-button-create"))
    (erase-buffer)
    ;; create the correct number of lines for the pixels for the
    ;; characters.
    (insert-char ?\n (length xbm-button-font-pixel-lines))
    (let ((i 0)
	  (str (make-string 1 0))
	  (lim (length text))
	  (bg-char ?0)
	  font-pixel-lines q)
      ;; loop through text, adding the character pixels
      (while (< i lim)
	(aset str 0 (aref text i))
	(if (null (setq q (assoc str xbm-button-font-line-indices)))
	    nil ; no pixel data for this character
	  (goto-char (point-min))
	  (setq font-pixel-lines xbm-button-font-pixel-lines)
	  (while font-pixel-lines
	    (end-of-line)
	    (if (not (bolp))
		;; Insert space before some of the characters.
		;; This isn't really correct for this font
		;; but doing it right is too hard.
		;; This isn't TeX after all.
		(if (memq (aref str 0) '(?, ?. ?\" ?! ?| ?\' ?\`))
		    (insert-char bg-char 1))
	      ;; offset the start a bit from the left edge of the button
	      (insert-char bg-char xbm-button-horizontal-padding))
	    ;; insert the character pixels.
	    (insert (substring (car font-pixel-lines) (nth 1 q) (nth 2 q)))
	    (forward-line)
	    (setq font-pixel-lines (cdr font-pixel-lines))))
	(setq i (1+ i)))
      ;; now offset the text from the right edge of the button.
      (goto-char (point-min))
      (while (not (eobp))
	(end-of-line)
	(insert-char bg-char xbm-button-horizontal-padding)
	(forward-line)))
    (let ((fg-char ?1)
	  (bg-char ?0)
	  i len up down disabled)
      ;; find the length of a pixel line.
      (goto-char (point-min))
      (end-of-line)
      (setq len (- (point) (point-min)))
      ;; offset text from the top of the button
      (goto-char (point-min))
      (setq i xbm-button-vertical-padding)
      (while (> i 0)
	(insert-char bg-char len)
	(insert ?\n)
	(setq i (1- i)))
      ;; offset text from the bottom of the button
      (goto-char (point-max))
      (setq i xbm-button-vertical-padding)
      (while (> i 0)
	(insert-char bg-char len)
	(insert ?\n)
	(setq i (1- i)))
      ;; add borders to the pixel lines
      (goto-char (point-min))
      (while (not (eobp))
	(insert-char fg-char border-thickness)
	(end-of-line)
	(insert-char fg-char border-thickness)
	(forward-line))
      ;; add top and bottom border lines
      (setq i border-thickness)
      (goto-char (point-min))
      (while (> i 0)
	(insert-char fg-char (+ len (* 2 border-thickness)))
	(insert ?\n)
	(setq i (1- i)))
      (setq i border-thickness)
      (goto-char (point-max))
      (while (> i 0)
	(insert-char fg-char (+ len (* 2 border-thickness)))
	(insert ?\n)
	(setq i (1- i)))
      ;; convert the pixel lines to octets of xbm bit data
      (setq up (xbm-bit-lines-to-xbm-bits)
	    down up)
      ;; stipple the foreground pixels for the disabled button.
      (let ((str (make-string 1 0))
	    (bit 0)
	    lim line-start)
	(aset str 0 fg-char)
	(goto-char (point-min))
	(while (not (eobp))
	  (setq lim (save-excursion (end-of-line) (point))
		line-start (point))
	  (while (search-forward str lim t)
	    (if (= (% (- (point) line-start) 2) bit)
		(subst-char-in-region (1- (point)) (point) fg-char bg-char t)))
	  (if (zerop bit)
	      (setq bit 1)
	    (setq bit 0))
	  (forward-line)))
      (setq disabled (xbm-bit-lines-to-xbm-bits))

      (list (vector 'xbm ':data up)
	    (vector 'xbm ':data down)
	    (vector 'xbm ':data disabled)) )))

;;; xbm-button.el ends here
