;;; DO NOT MODIFY THIS FILE
(if (featurep 'texinfo-autoloads) (error "Already loaded"))

;;;### (autoloads nil "_pkg" "texinfo/_pkg.el")

(package-provide 'texinfo :version 1.3 :author-version "No-Upstream-Ver" :type 'regular)

;;;***

;;;### (autoloads (batch-info-validate Info-validate Info-split Info-tagify) "informat" "texinfo/informat.el")

(autoload 'Info-tagify "informat" "\
Create or update Info file tag table in current buffer or in a region." t nil)

(autoload 'Info-split "informat" "\
Split an info file into an indirect file plus bounded-size subfiles.
Each subfile will be up to 50,000 characters plus one node.

To use this command, first visit a large Info file that has a tag
table.  The buffer is modified into a (small) indirect info file which
should be saved in place of the original visited file.

The subfiles are written in the same directory the original file is
in, with names generated by appending `-' and a number to the original
file name.  The indirect file still functions as an Info file, but it
contains just the tag table and a directory of subfiles." t nil)

(autoload 'Info-validate "informat" "\
Check current buffer for validity as an Info file.
Check that every node pointer points to an existing node." t nil)

(autoload 'batch-info-validate "informat" "\
Runs `Info-validate' on the files remaining on the command line.
Must be used only with -batch, and kills Emacs on completion.
Each file will be processed even if an error occurred previously.
For example, invoke \"emacs -batch -f batch-info-validate $info/ ~/*.info\"" nil nil)

;;;***

;;;### (autoloads (latex-mode plain-tex-mode tex-mode) "tex-mode" "texinfo/tex-mode.el")

(autoload 'tex-mode "tex-mode" "\
Major mode for editing files of input for TeX, LaTeX, or SliTeX.
Tries to determine (by looking at the beginning of the file) whether
this file is for plain TeX, LaTeX, or SliTeX and calls plain-tex-mode,
latex-mode, or slitex-mode, respectively.  If it cannot be determined,
such as if there are no commands in the file, the value of tex-default-mode
is used." t nil)

(fset 'TeX-mode 'tex-mode)

(fset 'LaTeX-mode 'latex-mode)

(autoload 'plain-tex-mode "tex-mode" "\
Major mode for editing files of input for plain TeX.
Makes $ and } display the characters they match.
Makes \" insert `` when it seems to be the beginning of a quotation,
and '' when it appears to be the end; it inserts \" only after a \\.

Use \\[tex-region] to run TeX on the current region, plus a \"header\"
copied from the top of the file (containing macro definitions, etc.),
running TeX under a special subshell.  \\[tex-buffer] does the whole buffer.
\\[tex-file] saves the buffer and then processes the file.
\\[tex-print] prints the .dvi file made by any of these.
\\[tex-view] previews the .dvi file made by any of these.
\\[tex-bibtex-file] runs bibtex on the file of the current buffer.

Use \\[validate-tex-buffer] to check buffer for paragraphs containing
mismatched $'s or braces.

Special commands:
\\{tex-mode-map}

Mode variables:
tex-run-command
	Command string used by \\[tex-region] or \\[tex-buffer].
tex-directory
	Directory in which to create temporary files for TeX jobs
	run by \\[tex-region] or \\[tex-buffer].
tex-dvi-print-command
	Command string used by \\[tex-print] to print a .dvi file.
tex-alt-dvi-print-command
	Alternative command string used by \\[tex-print] (when given a prefix
	argument) to print a .dvi file.
tex-dvi-view-command
	Command string used by \\[tex-view] to preview a .dvi file.
tex-show-queue-command
	Command string used by \\[tex-show-print-queue] to show the print
	queue that \\[tex-print] put your job on.

Entering Plain-tex mode calls the value of text-mode-hook, then the value of
tex-mode-hook, and then the value of plain-tex-mode-hook.  When the special
subshell is initiated, the value of tex-shell-hook is called." t nil)

(fset 'plain-TeX-mode 'plain-tex-mode)

(autoload 'latex-mode "tex-mode" "\
Major mode for editing files of input for LaTeX.
Makes $ and } display the characters they match.
Makes \" insert `` when it seems to be the beginning of a quotation,
and '' when it appears to be the end; it inserts \" only after a \\.

Use \\[tex-region] to run LaTeX on the current region, plus the preamble
copied from the top of the file (containing \\documentstyle, etc.),
running LaTeX under a special subshell.  \\[tex-buffer] does the whole buffer.
\\[tex-file] saves the buffer and then processes the file.
\\[tex-print] prints the .dvi file made by any of these.
\\[tex-view] previews the .dvi file made by any of these.
\\[tex-bibtex-file] runs bibtex on the file of the current buffer.

Use \\[validate-tex-buffer] to check buffer for paragraphs containing
mismatched $'s or braces.

Special commands:
\\{tex-mode-map}

Mode variables:
latex-run-command
	Command string used by \\[tex-region] or \\[tex-buffer].
tex-directory
	Directory in which to create temporary files for LaTeX jobs
	run by \\[tex-region] or \\[tex-buffer].
tex-dvi-print-command
	Command string used by \\[tex-print] to print a .dvi file.
tex-alt-dvi-print-command
	Alternative command string used by \\[tex-print] (when given a prefix
	argument) to print a .dvi file.
tex-dvi-view-command
	Command string used by \\[tex-view] to preview a .dvi file.
tex-show-queue-command
	Command string used by \\[tex-show-print-queue] to show the print
	queue that \\[tex-print] put your job on.

Entering Latex mode calls the value of text-mode-hook, then the value of
tex-mode-hook, and then the value of latex-mode-hook.  When the special
subshell is initiated, the value of tex-shell-hook is called." t nil)
(add-to-list 'auto-mode-alist '("\\.ltx\\'" . latex-mode))
(add-to-list 'auto-mode-alist '("\\.[tT]e[xX]\\'" . tex-mode))
(add-to-list 'auto-mode-alist '("\\.\\(?:sty\\|cls\\|bbl\\)\\'" . latex-mode))

;;;***

;;;### (autoloads (texi2info texinfo-format-region texinfo-format-buffer) "texinfmt" "texinfo/texinfmt.el")

(autoload 'texinfo-format-buffer "texinfmt" "\
Process the current buffer as texinfo code, into an Info file.
The Info file output is generated in a buffer visiting the Info file
name specified in the @setfilename command.

Non-nil argument (prefix, if interactive) means don't make tag table
and don't split the file if large.  You can use Info-tagify and
Info-split to do these manually." t nil)

(autoload 'texinfo-format-region "texinfmt" "\
Convert the current region of the Texinfo file to Info format.
This lets you see what that part of the file will look like in Info.
The command is bound to \\[texinfo-format-region].  The text that is
converted to Info is stored in a temporary buffer." t nil)

(autoload 'texi2info "texinfmt" "\
Convert the current buffer (written in Texinfo code) into an Info file.
The Info file output is generated in a buffer visiting the Info file
names specified in the @setfilename command.

This function automatically updates all node pointers and menus, and
creates a master menu.  This work is done on a temporary buffer that
is automatically removed when the Info file is created.  The original
Texinfo source buffer is not changed.

Non-nil argument (prefix, if interactive) means don't split the file
if large.  You can use Info-split to do this manually." t nil)

;;;***

;;;### (autoloads (texinfo-mode) "texinfo" "texinfo/texinfo.el")

(defcustom texinfo-open-quote "``" "*String inserted by typing \\[texinfo-insert-quote] to open a quotation." :type 'string :group 'texinfo)

(defcustom texinfo-close-quote "''" "*String inserted by typing \\[texinfo-insert-quote] to close a quotation." :type 'string :group 'texinfo)

(autoload 'texinfo-mode "texinfo" "Major mode for editing Texinfo files.\n\n  It has these extra commands:\n\\{texinfo-mode-map}\n\n  These are files that are used as input for TeX to make printed manuals\nand also to be turned into Info files with \\[makeinfo-buffer] or\nthe `makeinfo' program.  These files must be written in a very restricted and\nmodified version of TeX input format.\n\n  Editing commands are like text-mode except that the syntax table is\nset up so expression commands skip Texinfo bracket groups.  To see\nwhat the Info version of a region of the Texinfo file will look like,\nuse \\[makeinfo-region], which runs `makeinfo' on the current region.\n\n  You can show the structure of a Texinfo file with \\[texinfo-show-structure].\nThis command shows the structure of a Texinfo file by listing the\nlines with the @-sign commands for @chapter, @section, and the like.\nThese lines are displayed in another window called the *Occur* window.\nIn that window, you can position the cursor over one of the lines and\nuse \\[occur-mode-goto-occurrence], to jump to the corresponding spot\nin the Texinfo file.\n\n  In addition, Texinfo mode provides commands that insert various\nfrequently used @-sign commands into the buffer.  You can use these\ncommands to save keystrokes.  And you can insert balanced braces with\n\\[texinfo-insert-braces] and later use the command \\[up-list] to\nmove forward past the closing brace.\n\nAlso, Texinfo mode provides functions for automatically creating or\nupdating menus and node pointers.  These functions\n\n  * insert the `Next', `Previous' and `Up' pointers of a node,\n  * insert or update the menu for a section, and\n  * create a master menu for a Texinfo source file.\n\nHere are the functions:\n\n    texinfo-update-node                \\[texinfo-update-node]\n    texinfo-every-node-update          \\[texinfo-every-node-update]\n    texinfo-sequential-node-update\n\n    texinfo-make-menu                  \\[texinfo-make-menu]\n    texinfo-all-menus-update           \\[texinfo-all-menus-update]\n    texinfo-master-menu\n\n    texinfo-indent-menu-description (column &optional region-p)\n\nThe `texinfo-column-for-description' variable specifies the column to\nwhich menu descriptions are indented.\n\nPassed an argument (a prefix argument, if interactive), the\n`texinfo-update-node' and `texinfo-make-menu' functions do their jobs\nin the region.\n\nTo use the updating commands, you must structure your Texinfo file\nhierarchically, such that each `@node' line, with the exception of the\nTop node, is accompanied by some kind of section line, such as an\n`@chapter' or `@section' line.\n\nIf the file has a `top' node, it must be called `top' or `Top' and\nbe the first node in the file.\n\nEntering Texinfo mode calls the value of `text-mode-hook', and then the\nvalue of `texinfo-mode-hook'." t nil)
(add-to-list 'auto-mode-alist '("\\.texi\\(?:nfo\\)?\\'" . texinfo-mode))

;;;***

(provide 'texinfo-autoloads)
