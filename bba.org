# -*- org-export-babel-evaluate: nil;  -*-
#+SETUPFILE: ~/git/github/org-html-themes/setup/theme-bigblow-local.setup
#+STARTUP: showall
#+TITLE: bba emacs configuration
#+OPTIONS: toc:4 h:4

* Configuration

<<babel-init>>

Inspired by the [[http://eschulte.github.io/emacs-starter-kit/][Emacs Starter Kit]] and [[http://sachachua.com/blog/][Sacha Chua]] I set up my configuration file
using Org-babel. You could load it with =(org-babel-load-file "/path/to/file")=,
changing the path appropriately, but you'll probably want to tweak it
extensively first.

Some general links regarding these configuration:

- http://www.emacswiki.org/emacs/EmacsCrashCode
- http://www.emacswiki.org/emacs/EmacsCrashTips
- http://www.emacswiki.org/emacs/EmacsNiftyTricks

To be precise, this is what's in the first part of my =~/.emacs.d/init.el= (what used to be the =~/.emacs= file):

#+BEGIN_SRC emacs-lisp :tangle no
  ;; This sets up the load path so that we can override it
  ;; (package-initialize)
  ;; Override the packages with the git version of Org and other packages

    (setq load-path
    (append
    (list (expand-file-name "~/.emacs.d/") (expand-file-name "~/.emacs.d/elpa/org-20150629"))
    ;;           (expand-file-name "/usr/share/emacs/lisp/")
    load-path))


  (add-to-list 'load-path "~/.emacs/elpa/org-20150629")

  ;; (add-to-list 'load-path "~/elisp/org-mode/contrib/lisp")
  ;; Load the rest of the packages
  ;; (package-initialize t)
  ;; (setq package-enable-at-startup nil)
  (setq org-use-extra-keys t)
  (require 'org)
  (require 'ob-tangle)
  (require 'ob-sql)
  (org-babel-load-file (expand-file-name "~/.emacs.d/bba.org"))

#+END_SRC

This git repository includes a .gitignore file excluding .elc files.
You might want to run =C-u 0 M-x byte-recompile-directory= after a
fresh clone. Install the githooks and your .elc files will get
recompiled after a git pull.

* debugging

If you are in need enable debugging:

#+BEGIN_SRC emacs-lisp :tangle no
(setq debug-on-error t)
#+END_SRC

* run in servermode

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))

#+END_SRC

* set environment variables on osx
    [2015-07-16 Thu 19:10]

If running standalone on OSX we need to get some environment variables
from bash.

#+BEGIN_SRC emacs-lisp
  (if (string-equal system-type "darwin")
          (progn
            (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $PATH")))
              (setenv "PATH" path)
              (setq exec-path
                    (append
                     (split-string-and-unquote path ":")
                     exec-path)))
            (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $ORACLE_HOME")))
              (setenv "ORACLE_HOME" path)
              )
            (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $CLASSPATH")))
              (setenv "CLASSPATH" path)
              )
            (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $NLS_LANG")))
              (setenv "NLS_LANG" path)
              )
            (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $TNS_ADMIN")))
              (setenv "TNS_ADMIN" path)
              )
            (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $DYLD_LIBRARY_PATH")))
              (setenv "DYLD_LIBRARY_PATH" path)
              )
            (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $SYSENV")))
              (setenv "SYSENV" path)
              )
            (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $http_proxy")))
              (setenv "http_proxy" path)
              )
            (let ((path (shell-command-to-string ". ~/.bashrc >/dev/null; echo -n $https_proxy")))
              (setenv "https_proxy" path)
              )
            )
      )
#+END_SRC

* define emacs shutdown function

I like to commit my notes in my org and workorg folders after a days work.
Keep track of your important stuff!

#+BEGIN_SRC emacs-lisp

  ;; define function to shutdown emacs server instance
  (defun server-shutdown ()
    "Save buffers, Quit, and Shutdown (kill) server"
    (interactive)
    (save-some-buffers)
    (shell-command "git --work-tree ~/org/ --git-dir ~/org/.git commit -a -m 'autocommit'")
    (if (equal "work" (getenv "SYSENV"))
        (progn
          (shell-command "git --work-tree ~/workorg/ --git-dir ~/workorg/.git commit -a -m 'autocommit'")
          (shell-command "git --work-tree ~/workorg/ --git-dir ~/workorg/.git push origin")
          )
      (progn
        (shell-command "git --work-tree ~/org/ --git-dir ~/org/.git push origin")
        ))
    (setq twittering-cert-file nil )
    (kill-emacs)
    )

#+END_SRC

* async
#+BEGIN_SRC emacs-lisp
  (if (>= emacs-major-version 25)
      (progn
        (add-to-list 'load-path "~/.emacs.d/elpa/async-20150529.529")
        (require 'async)
        )
    )
#+END_SRC
* [[http://www.emacswiki.org/emacs/ELPA][ELPA]]

#+BEGIN_SRC emacs-lisp
    (if (>= emacs-major-version 24)
        (progn
          (add-to-list 'load-path "~/.emacs.d/elpa")
          (add-to-list 'load-path "~/.emacs.d/elpa/popup-20150626.711")
          (require 'package)
          (package-initialize)
          (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
          (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
          )
      (progn
        (add-to-list 'load-path "~/.emacs.d/elpa/cl-lib-0.5")
        (add-to-list 'load-path "~/.emacs.d/elpa/magit-1.2.0")
        (add-to-list 'load-path "~/.emacs.d/elpa/yaml-mode-20141125.37")
        (require 'yaml-mode)
        )

      )
#+END_SRC

* magit

For annotated tags prepare message with commit messages since last tag.

#+BEGIN_SRC emacs-lisp
  (require 'magit)
  (setq magit-last-seen-setup-instructions "1.4.0")
  (add-hook 'git-commit-mode-hook
            (lambda()
              (when (equal "TAG_EDITMSG" (buffer-name))
                (progn
                  (insert (shell-command-to-string "git log --pretty=format:\"* %s\" `git rev-list --tags --max-count=1`..HEAD" ))
                  (newline)
                  (beginning-of-buffer)
                  (newline)
                  (beginning-of-buffer)
                  )
                )
              )
            )

#+END_SRC
* fullframe
open ibuffer and magit-status in fullframe mode.
#+BEGIN_SRC emacs-lisp
    (if (>= emacs-major-version 24)
        (progn
          (add-to-list 'load-path "~/.emacs.d/elpa/fullframe-20140619.305")
          (require 'fullframe)
          (fullframe magit-status magit-mode-quit-window)
          (fullframe ibuffer ibuffer-quit)
          )
      )
#+END_SRC
* [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][winner-mode]]
    [2015-06-10 Wed 09:33]

Get undo for your window layout.

#+BEGIN_SRC emacs-lisp
  (if (>= emacs-major-version 24)
      (winner-mode 1))
#+END_SRC
* smartparens-mode
Enable smart parens in all modes.
See [[https://github.com/toctan/smartparens][Smartparens on github]].

#+BEGIN_SRC emacs-lisp
  (if (>= emacs-major-version 24)
      (progn
        (add-to-list 'load-path "~/.emacs.d/elpa/smartparens-20150628.1418")
        (add-to-list 'load-path "~/.emacs.d/elpa/dash-20150704.253")
        (require 'smartparens)
        (smartparens-global-mode 1)
        ))
#+END_SRC
* [[https://github.com/hrs/engine-mode][engine-mode]]

search the web on your fingertips. C-c /.

|---+-------------|
| a | amazon.de   |
| b | bing        |
| c | cfengine    |
| g | google      |
| G | github      |
| m | google maps |
| w | wikipedia   |
| y | youtube     |
|---+-------------|


#+BEGIN_SRC emacs-lisp
  (if (>= emacs-major-version 24)
      (progn
        (require 'engine-mode)
        (setq engine/browser-function 'eww-browse-url)

          (defengine amazon
            "http://www.amazon.de/s/ref=nb_sb_noss?url=search-alias%3Daps&filed-keywords=%s"
            :keybinding "a"
            )

          (defengine bing
            "http://www.bing.com/search?q=%s&qs=bs&form=QBLH"
            :keybinding "b"
            )

          (defengine cfengine
            "https://docs.cfengine.com/latest/search.html?q=%s"
            :keybinding "c"
            )


          (defengine github
            "http://www.github.com/search?q=%s"
            :keybinding "G"
            )

          (defengine google
            "http://www.google.com/?q=%s"
            :keybinding "g"
            )

          (defengine leo
            "http://dict.leo.org/ende/index_de.html#/search=%s"
            :keybinding "l"
            )

          (defengine google-maps
            "http://maps.google.com/maps?q=%s"
            :keybinding "m"
            )

          (defengine wikipedia
            "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
            :keybinding "w"
            )

          (defengine youtube
            "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
            :keybinding "y"
            )
          (engine-mode 1)
          (engine/set-keymap-prefix (kbd "C-c C-/"))
        )
    )
#+END_SRC

* expand-region
    [2015-04-02 Thu 10:32]

#+BEGIN_SRC emacs-lisp
  (if (>= emacs-major-version 24)
      (progn
        (add-to-list 'load-path "~/.emacs.d/elpa/expand-region-20150525.205")
        (require 'expand-region)
        (define-key global-map (kbd "C-c <f11>") 'er/contract-region )
        (define-key global-map (kbd "C-c <f12>") 'er/expand-region )
        ))

#+END_SRC
* yasnippet

My first thought: Nice. But do I have a use case? After half a year I
cannot live without it. I write most of my [[http://www.cfengine.com][CFEngine]] code with
snippets. Some help for Perl and even for org-mode.

#+BEGIN_SRC emacs-lisp
          (add-to-list 'load-path
                       "~/.emacs.d/elpa/yasnippet-20150415.244")
          (require 'yasnippet)
          (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
          (yas-global-mode 1)
          (define-key global-map "\C-cy" 'yas/insert-snippet)
#+END_SRC
* [[https://github.com/flycheck/flycheck][flycheck]]

#+BEGIN_SRC emacs-lisp
    (if (>= emacs-major-version 24)
        (progn
          (add-to-list 'load-path "~/.emacs.d/elpa/flycheck-20150703.359")
          (require 'flycheck)
          (add-hook 'after-init-hook #'global-flycheck-mode)
          ))
#+END_SRC

* [[https://github.com/kai2nenobu/guide-key][guide-key]]

Probably the best help to keep track of the not every day used keybindings.

#+BEGIN_SRC emacs-lisp
  (if (>= emacs-major-version 24)
      (progn
        (add-to-list 'load-path "~/.emacs.d/elpa/popwin-20150315.600")
        (add-to-list 'load-path "~/.emacs.d/elpa/guide-key-20150107.2235")
        (require 'guide-key)
        (setq guide-key/guide-key-sequence '("C-x" "C-x 4" "C-c" "C-h" "C-x l" "<f9>"))
        (setq guide-key/recursive-key-sequence-flag t)
        (setq guide-key/idle-delay 3)
        (guide-key-mode 1)
        )
    )
#+END_SRC
* latex

#+BEGIN_SRC emacs-lisp
  (setq tex-dvi-view-command "(f=*; pdflatex \"${f%.dvi}.tex\" && open \"${f%.dvi}.pdf\")")
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)

  (add-hook 'latex-mode-hook
    (lambda ()
      (auto-fill-mode)
      ))


#+END_SRC

* template support

Some default templates for new files are stored in [[templates/]].
No need to start .pl .sh from scratch.

#+BEGIN_SRC emacs-lisp
  (require 'template)
  (template-initialize)
#+END_SRC

* thesaurus

#+BEGIN_SRC emacs-lisp
  ;; The file names are absolute, not relative, locations
  ;;     - e.g. /foobar/mthesaur.txt.cache, not mthesaur.txt.cache
  (setq synonyms-file        "~/.emacs.d/mthesaur.txt")
  (setq synonyms-cache-file  "~/.emacs.d/mthesaur.txt.cache")
  (require 'synonyms)
;;  (define-key global-map (kbd "C-c ?") 'synonyms)

#+END_SRC

* yaml mode
#+BEGIN_SRC emacs-lisp
  ;; load yaml-mode
  ;; (require 'yaml-mode)
  ;; (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

#+END_SRC

* htmlize

#+BEGIN_SRC emacs-lisp
  (if (>= emacs-major-version 24)
      (progn
        (require 'htmlize )
        )
  )


#+END_SRC

* vc-git

#+BEGIN_SRC emacs-lisp
  (require 'vc-git)
    (when (featurep 'vc-git) (add-to-list 'vc-handled-backends 'git))

#+END_SRC

* ace-jump-mode

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elpa/ace-jump-mode-20140616.115")
  (require 'ace-jump-mode)
  (define-key global-map (kbd "C-c C-@") 'ace-jump-mode)
  (define-key global-map (kbd "C-c C-SPC") 'ace-jump-mode)

#+END_SRC

* ido-mode

I still like ido-find-file.

#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-case-fold nil
        ido-auto-merge-work-directories-length -1
        ido-create-new-buffer 'always
        ido-use-filename-at-point nil
        ido-max- 10)
  ;; (require 'ido-vertical-mode)
  ;; (ido-vertical-mode)

  ;; (defun sd/ido-define-keys() ;; C-n/p is more intuitive in vertical layout
  ;;   (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
  ;;   (define-key ido-completion-map (kbd "<down>") 'ido-next-match)
  ;;   (define-key ido-completion-map (kbd "C-p") 'ido-prev-match)
  ;;   (define-key ido-completion-map (kbd "<up>") 'ido-prev-match)
  ;; )


#+END_SRC


* visual-regexp

#+BEGIN_SRC emacs-lisp
  (if (>= emacs-major-version 24)
      (progn
        (require 'visual-regexp)
        (define-key global-map (kbd "M-&") 'vr/query-replace)
        (define-key global-map (kbd "M-/") 'vr/replace)
        )
  )
#+END_SRC

* org-mode

See [[http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html][orgtutorial_dto]] for details.

It's worth to use Emacs for org-mode alone.
[[http://howardism.org/Technical/Emacs/literate-devops.html][Literate DevOps]] and [[http://www.howardism.org/Technical/Emacs/literate-database.html][Literate Database Work]] are only 2 use cases.
With [[https://github.com/fniessen/org-html-themes.git][org html themes]] it's easy to generate beautiful output.

** org-protocol

Run these commands to make org-protocol work in gnome:

#+BEGIN_SRC sh :eval no :tangle no
gconftool-2 -s /desktop/gnome/url-handlers/org-protocol/command '/usr/bin/emacsclient %s' --type String
gconftool-2 -s /desktop/gnome/url-handlers/org-protocol/enabled --type Boolean true
#+END_SRC

this is how your firefox bookmark must look like:

#+BEGIN_SRC :eval no :tangle no
javascript:location.href='org-protocol://capture:/l/'%20+%20encodeURIComponent(location.href)+'/'%20+%20encodeURIComponent(document.title)+%20'/'%20+%20encodeURIComponent(window.getSelection()%20)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)

  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
  (setq org-id-method (quote uuidgen))
  (setq org-src-window-setup 'current-window)

  (if (equal "work" (getenv "SYSENV"))
  (setq org-agenda-files (list "~/workorg/work.org"
                               "~/org/notes.org"
                               "~/org/emacs.org"
                               "~/org/private.org"
                               "~/org/it.org"
                               "~/org/refile.org"
                               "~/org/workhours.org"
                               ))
  (setq org-agenda-files (list "~/org/work.org"
                               "~/org/notes.org"
                               "~/org/emacs.org"
                               "~/org/private.org"
                               "~/org/it.org"
                               "~/org/refile.org"
                               "~/org/workhours.org"
                               ))
  )

#+END_SRC

** Some initial languages we want org-babel to support

#+BEGIN_SRC emacs-lisp

    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (sh . t)
       (python . t)
       (R . t)
       (ruby . t)
       (ditaa . t)
       (dot . t)
       (octave . t)
       (sqlite . t)
       (perl . t)
       ))

    ;;(setq org-html-preamble nil
    ;;     org-html-postamble nil
    ;;      org-html-head "")

    ;; (setq org-html-preamble nil
    ;;       org-html-postamble nil
    ;;       org-html-include-default-style nil
    ;;       org-html-head ""
    ;;       org-export-html-with-timestamp nil
    ;;       org-export-html-style "body-only"
    ;; )
    ;; body-only option ?

    ;; (setq html (org-export-as-html 3 nil nil 1))


#+END_SRC

** Find next and previous =#+BEGIN_SRC sh= block.
Very useful for repetitive literate devops jobs.
<C-c> <S-n> then <C-c><C-c> and so on.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()

              (fset 'bba/org-search-src-sh
                    (lambda (&optional arg) "Find next BEGIN_SRC sh block." (interactive "p") (kmacro-exec-ring-item (quote ([19 94 35 92 43 66 69 71 73 78 95 83 82 67 32 115 104 down] 0 "%d")) arg)))
              (define-key org-mode-map "\C-c\S-n" 'bba/org-search-src-sh)

              (fset 'bba/org-search-src-sh-reverse
                    (lambda (&optional arg) "Find previous BEGIN_SRC sh block." (interactive "p") (kmacro-exec-ring-item (quote ([18 94 35 92 43 66 69 71 73 78 95 83 82 67 32 115 104 18 down] 0 "%d")) arg)))
              (define-key org-mode-map "\C-c\S-p" 'bba/org-search-src-sh-reverse)
  ))

#+END_SRC

** Define some shortcuts to access major org files.

#+BEGIN_SRC emacs-lisp


  (global-set-key (kbd "C-c <f5>") '(lambda () (interactive) (find-file "~/org/notes.org")))

  (global-set-key (kbd "C-c <f7>") '(lambda () (interactive) (find-file "~/org/private.org")))

  (if (equal "work" (getenv "SYSENV"))
      (progn
        (global-set-key (kbd "C-c <f6>") '(lambda () (interactive) (find-file "~/workorg/work.org")))
        (global-set-key (kbd "C-c <f8>") '(lambda () (interactive) (find-file "~/workorg/workhours.org")))
        )
    (progn
      (global-set-key (kbd "C-c <f6>") '(lambda () (interactive) (find-file "~/org/work.org")))
      (global-set-key (kbd "C-c <f8>") '(lambda () (interactive) (find-file "~/org/workhours.org")))))

  (global-set-key (kbd "C-c <f9>") '(lambda () (interactive)
                                      ( if (file-exists-p "~/org/emacs.org")
                                          (find-file "~/org/emacs.org")
                                        (find-file "~/.emacs.d/org/emacs.org"))))
  (global-set-key (kbd "C-c <f10>") '(lambda () (interactive) (find-file "~/.emacs.d/bba.org")))

#+END_SRC

** Tag tasks with GTD contexts

#+BEGIN_SRC emacs-lisp
               (setq org-tag-alist '(("@work" . ?b)
                                     ("@home" . ?h)
                                     ("@errands" . ?e)
                                     ("@coding" . ?c)
                                     ("@phone" . ?p)
                                     ("@reading" . ?r)
                                     ("@computer" . ?l)
                                     ))

#+END_SRC

#+BEGIN_SRC emacs-lisp

    ;; (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)
    (setq org-clock-persist t)
    (setq org-default-notes-file (concat org-directory "/refile.org"))
    (define-key global-map "\C-cc" 'org-capture)

    (setq org-capture-templates

    '(("t" "todo" entry (file+headline "~/org/refile.org" "Tasks")
    "* TODO %^{Task}\n%U\n

    %i\n
    %a\n
    %?
    ")

      ("m" "Meeting" entry (file "~/org/refile.org")
       "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)

      ("n" "note" entry (file+headline "~/org/refile.org" "Note")
       "* NOTE %?\n%U\n

    %i\n
    %a")

      ("w" "work todo" (file+headline "~/workorg/work.org" "todolist")
       "* TODO %{Task}\n%U\n

    %i\n
    %a\n
    %?"
       )

    ("j" "Journal" entry (file+datetree "~/git/org/diary.org")
     "* %?\n%U\n" :clock-in t :clock-resume t)

    ("l" "Links (it)" entry (file+headline "~/org/refile.org" "Links")
    "** %c\n\n  %u\n  %i"
             :empty-lines 1)

    ))

#+END_SRC

** Define some handy link abbreviations

#+BEGIN_SRC emacs-lisp

    (setq org-link-abbrev-alist '(
    ("bing" . "http://www.bing.com/search?q=%sform=OSDSRC")
    ("cpan" . "http://search.cpan.org/search?query=%s&mode=all")
    ("google" . "http://www.google.com/search?q=")
    ("gmap" . "http://maps.google.com/maps?q=%s")
    ("omap" . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
    ("bmap" . "http://www.bing.com/maps/default.aspx?q=%s&mkt=en&FORM=HDRSC4")
    ("wiki" . "http://en.wikipedia.org/wiki/")
    ("rfc" . "http://tools.ietf.org/rfc/rfc%s.txt")
    ("ads" . "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")
    ))
    ;; example: [[bmap:space needle]]

#+END_SRC

** Some clock stuff.
taken from http://doc.norang.ca/org-mode.org

#+BEGIN_SRC emacs-lisp


    ;;
    ;; Resume clocking task when emacs is restarted
    (org-clock-persistence-insinuate)
    ;;
    ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
    (setq org-clock-history-length 23)
    ;; Resume clocking task on clock-in if the clock is open
    (setq org-clock-in-resume t)
    ;; Change tasks to NEXT when clocking in
    (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
    ;; Separate drawers for clocking and logs
    (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
    ;; Save clock data and state changes and notes in the LOGBOOK drawer
    (setq org-clock-into-drawer t)
    ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
    (setq org-clock-out-remove-zero-time-clocks t)
    ;; Clock out when moving task to a done state
    (setq org-clock-out-when-done t)
    ;; Save the running clock and all clock history when exiting Emacs, load it on startup
    (setq org-clock-persist t)
    ;; Do not prompt to resume an active clock
    (setq org-clock-persist-query-resume nil)
    ;; Enable auto clock resolution for finding open clocks
    (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
    ;; Include current clocking task in clock reports
    (setq org-clock-report-include-clocking-task t)
    (setq org-time-clocksum-format
          '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
    (setq bh/keep-clock-running nil)

    (defun bh/clock-in-to-next (kw)
      "Switch a task from TODO to NEXT when clocking in.
    Skips capture tasks, projects, and subprojects.
    Switch projects and subprojects from NEXT back to TODO"
      (when (not (and (boundp 'org-capture-mode) org-capture-mode))
        (cond
         ((and (member (org-get-todo-state) (list "TODO"))
               (bh/is-task-p))
          "NEXT")
         ((and (member (org-get-todo-state) (list "NEXT"))
               (bh/is-project-p))
          "TODO"))))

    (defun bh/find-project-task ()
      "Move point to the parent (project) task if any"
      (save-restriction
        (widen)
        (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
          (while (org-up-heading-safe)
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (goto-char parent-task)
          parent-task)))

    (defun bh/punch-in (arg)
      "Start continuous clocking and set the default task to the
    selected task.  If no task is selected set the Organization task
    as the default task."
      (interactive "p")
      (setq bh/keep-clock-running t)
      (if (equal major-mode 'org-agenda-mode)
          ;;
          ;; We're in the agenda
          ;;
          (let* ((marker (org-get-at-bol 'org-hd-marker))
                 (tags (org-with-point-at marker (org-get-tags-at))))
            (if (and (eq arg 4) tags)
                (org-agenda-clock-in '(16))
              (bh/clock-in-organization-task-as-default)))
        ;;
        ;; We are not in the agenda
        ;;
        (save-restriction
          (widen)
          ; Find the tags on the current task
          (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
              (org-clock-in '(16))
            (bh/clock-in-organization-task-as-default)))))

    (defun bh/punch-out ()
      (interactive)
      (setq bh/keep-clock-running nil)
      (when (org-clock-is-active)
        (org-clock-out))
      (org-agenda-remove-restriction-lock))

    (defun bh/clock-in-default-task ()
      (save-excursion
        (org-with-point-at org-clock-default-task
          (org-clock-in))))

    (defun bh/clock-in-parent-task ()
      "Move point to the parent (project) task if any and clock in"
      (let ((parent-task))
        (save-excursion
          (save-restriction
            (widen)
            (while (and (not parent-task) (org-up-heading-safe))
              (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
                (setq parent-task (point))))
            (if parent-task
                (org-with-point-at parent-task
                  (org-clock-in))
              (when bh/keep-clock-running
                (bh/clock-in-default-task)))))))

    ;; (defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")
    (defvar bh/organization-task-id "20140625-424242-424242")

    (defun bh/clock-in-organization-task-as-default ()
      (interactive)
      (org-with-point-at (org-id-find bh/organization-task-id 'marker)
        (org-clock-in '(16))))

    (defun bh/clock-out-maybe ()
      (when (and bh/keep-clock-running
                 (not org-clock-clocking-in)
                 (marker-buffer org-clock-default-task)
                 (not org-clock-resolving-clocks-due-to-idleness))
        (bh/clock-in-parent-task)))

    (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

    (defvar bh/insert-inactive-timestamp t)

    (defun bh/toggle-insert-inactive-timestamp ()
      (interactive)
      (setq bh/insert-inactive-timestamp (not bh/insert-inactive-timestamp))
      (message "Heading timestamps are %s" (if bh/insert-inactive-timestamp "ON" "OFF")))

    (defun bh/insert-inactive-timestamp ()
      (interactive)
      (org-insert-time-stamp nil t t nil nil nil))

    (defun bh/insert-heading-inactive-timestamp ()
      (save-excursion
        (when bh/insert-inactive-timestamp
          (org-return)
          (org-cycle)
          (bh/insert-inactive-timestamp))))

    (add-hook 'org-insert-heading-hook 'bh/insert-heading-inactive-timestamp 'append)

    ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
    (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                     (org-agenda-files :maxlevel . 9))))

    ; Use full outline paths for refile targets - we file directly with IDO
    (setq org-refile-use-outline-path t)

    ; Targets complete directly with IDO
    (setq org-outline-path-complete-in-steps nil)

    ; Allow refile to create parent tasks with confirmation
    (setq org-refile-allow-creating-parent-nodes (quote confirm))

    ; Use IDO for both buffer and file completion and ido-everywhere to t
    (setq org-completion-use-ido t)
    (setq ido-everywhere t)
    (setq ido-max-directory-size 100000)
    (ido-mode (quote both))
    ; Use the current window when visiting files and buffers with ido
    (setq ido-default-file-method 'selected-window)
    (setq ido-default-buffer-method 'selected-window)
    ; Use the current window for indirect buffer display
    (setq org-indirect-buffer-display 'current-window)

    ;;;; Refile settings
    ; Exclude DONE state tasks from refile targets
    (defun bh/verify-refile-target ()
      "Exclude todo keywords with a done state from refile targets"
      (not (member (nth 2 (org-heading-components)) org-done-keywords)))

    (setq org-refile-target-verify-function 'bh/verify-refile-target)


    (global-set-key (kbd "<f12>") 'org-agenda)
    (global-set-key (kbd "<f9> c") 'calendar)
    (global-set-key (kbd "<f9> I") 'bh/punch-in)
    (global-set-key (kbd "<f9> O") 'bh/punch-out)
    (global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
    (global-set-key (kbd "<f9> T") 'bh/toggle-insert-inactive-timestamp)
    (global-set-key (kbd "C-<f9>") 'previous-buffer)
    (global-set-key (kbd "C-<f10>") 'next-buffer)
    (global-set-key (kbd "<f11>") 'org-clock-goto)
    (global-set-key (kbd "C-<f11>") 'org-clock-in)



  (if (>= emacs-major-version 24)
      (progn
        (add-hook 'org-mode-hook
                  (lambda ()
                    (auto-fill-mode)
                    (flyspell-mode)
                    (define-key org-mode-map "\C-h\C-y" '(lambda () (interactive) (find-file "~/.emacs.d/snippets/org-mode.org")))

                    ))
        )
    (progn
      (add-hook 'org-mode-hook
                (lambda ()
                  (auto-fill-mode)
                  (define-key org-mode-map "\C-h\C-y" '(lambda () (interactive) (find-file "~/.emacs.d/snippets/org-mode.org"))))
                ))

    )


#+END_SRC

** youtube links

Thanks to [[http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html][endlessparentheses]]: Youtube makes it pretty simple
to embed videos, they give you the entire iframe HTML code to use, but
this wouldn’t really be Emacs if we couldn’t make things just a little
bit easier.

#+BEGIN_SRC emacs-lisp
  (defvar yt-iframe-format
    ;; You may want to change your width and height.
    (concat "<iframe width=\"440\""
            " height=\"335\""
            " src=\"https://www.youtube.com/embed/%s\""
            " frameborder=\"0\""
            " allowfullscreen>%s</iframe>"))

  (org-add-link-type
   "yt"
   (lambda (handle)
     (browse-url
      (concat "https://www.youtube.com/embed/"
              handle)))
   (lambda (path desc backend)
     (cl-case backend
       (html (format yt-iframe-format
                     path (or desc "")))
       (latex (format "\href{%s}{%s}"
                      path (or desc "video"))))))
#+END_SRC

To use this, just write your org links in the following way (optionally adding a description).

[[yt:A3JAlWM8qRM]]

When you export to HTML, this will produce that same inlined snippet
that Youtube specifies. The advantage (over simply writing out the
iframe) is that this link can be clicked in org-mode, and can be
exported to other formats as well.

* cfengine

#+BEGIN_SRC emacs-lisp
  ;;   (load-library "cfengine")
     (load-file (expand-file-name "~/.emacs.d/lisp/cfengine.el"))
     (add-to-list 'auto-mode-alist '("\\.cf$" . cfengine3-mode))

     ;; post-commit and post-merge hook for git:
     ;; #!/bin/bash
     ;; rm .git/etags
     ;; find ${PWD} -type f -regex ".*\(\.cf\|_pl\.dat\|_conf.dat\)" | xargs etags --append --output=.git/etags
     ;; set link for emacs:
     ;; ln -s ~/.cfagent/inputs/../.git/etags ~/.cfengine_tags

     (defun load-git-cfengine ()
       "Load config and tags file of git cfengine repo"
     (interactive) (visit-tags-table "~/.cfengine_tags")
     (interactive) (find-file "~/.cfagent/inputs/config.cf")
     )

     ;; cfe-config-adduser-ldap runs ldapsearch with cn=user to fill some values.

     (defun cfe-config-adduser-ldap ( user )
       "Insert usertemplate based on ldap information for config.cf"
       (interactive "sUser: ")
       (insert "      \"users[" user "][login]\" string => \"" user "\";
           \"users[" user "][fullname]\" string => \"" (substring ( shell-command-to-string (concat "ldapse " user " givenName ")) 0 -1) " " (substring ( shell-command-to-string (concat "ldapse " user " sn ")) 0 -1) "\";
           \"users[" user "][uid]\" string => \"" (substring ( shell-command-to-string (concat "ldapse " user " uidNumber")) 0 -1) "\";
           \"users[" user "][gid]\" string => \"" (substring ( shell-command-to-string (concat "ldapse " user " uidNumber")) 0 -1)"\";
           \"users[" user "][group]\" string => \"" user "\";
           \"users[" user "][groups]\" string => \"adm,apache,games\";
           \"users[" user "][home]\" string => \"/home/" user "\";
           \"users[" user "][shell]\" string => \"/bin/bash\";
           \"users[" user "][flags]\" string => \"-m\";
           \"users[" user "][authorized_keys][0]\" string => \"\";" )

     )

     (defun cfe-config-adduser ( user )
       "Insert usertemplate for config.cf"
       (interactive "sUser: ")
       (insert "      \"users[" user "][login]\" string => \"" user "\";
           \"users[" user "][fullname]\" string => \"\";
           \"users[" user "][uid]\" string => \"\";
           \"users[" user "][gid]\" string => \"\";
           \"users[" user "][group]\" string => \"" user "\";
           \"users[" user "][groups]\" string => \"" user "\";
           \"users[" user "][home]\" string => \"/home/" user "\";
           \"users[" user "][shell]\" string => \"/bin/bash\";
           \"users[" user "][flags]\" string => \"-m\";
           \"users[" user "][authorized_keys][0]\" string => \"\";" )

     )

     (add-hook 'cfengine3-mode-hook
       (lambda ()
         (which-function-mode)

         (define-key cfengine3-mode-map "\C-c\S-t" (lambda()
                                                     (interactive)
                                                     (shell-command "~/bin/cfengine_update_testing.sh" )))
         (define-key cfengine3-mode-map "\C-cu" 'cfe-config-adduser-ldap)
         (define-key cfengine3-mode-map "\C-c\C-c" 'compile)
         (define-key cfengine3-mode-map "\C-c," (lambda()
                                                   (interactive)
                                                   (browse-url (concat "https://docs.cfengine.com/latest/search.html?q=" (word-at-point)))))
           (define-key cfengine3-mode-map "\C-h\C-y" '(lambda () (interactive) (find-file "~/.emacs.d/snippets/cfengine3-mode.org")))
         ))


#+END_SRC

for C-c T you can use a file like this one:

#+NAME: ~/bin/cfengine_update_testing.sh
#+BEGIN_SRC sh :tangle no
  #!/bin/bash
  :<<cut
  =cut

  =pod

  =head1 NAME

  cfengine_update_testing

  =head1 DESCRIPTION

  sync cfengine inputs to agtest03 and run failsafe.

  =cut

  cf-promises -D customlib_active || exit 3
  rsync -av --progress --delete -e ssh ~/.cfagent/inputs/ agtest03:/var/cfengine/masterfiles/
  ssh agtest03 "/usr/local/sbin/cf-agent -f /var/cfengine/inputs/failsafe.cf"

  :<<=cut

  =head1 AUTHOR

  Andreas Gerler <baron@bundesbrandschatzamt.de>

  =cut
#+END_SRC

* mwheel

#+BEGIN_SRC emacs-lisp
  (load-library "mwheel")
  (mwheel-install)

#+END_SRC

* [[http://emacs.wordpress.com/2007/06/21/tip-of-the-day/][tip of the day]]
    [2014-09-24 Wed 12:06]

Display an Emacs tip of the day.
You may start it at the end of the config file.

#+BEGIN_SRC emacs-lisp
(defun totd ()
  (interactive)
  (random t) ;; seed with time-of-day
  (with-output-to-temp-buffer "*Tip of the day*"
    (let* ((commands (loop for s being the symbols
                           when (commandp s) collect s))
           (command (nth (random (length commands)) commands)))
      (princ
       (concat "Your tip for the day is:\n"
               "========================\n\n"
               (describe-function command)
               "\n\nInvoke with:\n\n"
               (with-temp-buffer
                 (where-is command t)
                 (buffer-string)))))))
#+END_SRC

* TRAMP

#+BEGIN_SRC emacs-lisp
  (load-library "tramp")
  (add-to-list 'tramp-remote-path "~/bin")
  (setq default-tramp-method "sshx")
#+END_SRC

With this you can do /sudo:ssh-host:file-on-ssh-host

#+BEGIN_SRC emacs-lisp
  (add-to-list 'tramp-default-proxies-alist '(".*" "\`root\'" "/ssh:%h:"))
#+END_SRC

* [[http://www.twmode.sourceforge.net/][twitter]]

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elpa/twittering-mode-20150131.708")
  (require 'twittering-mode)
  (cond
   ((string-equal system-type "gnu/linux")
    (progn
      (setq twittering-cert-file "/etc/ssl/certs/ca-bundle.crt") )
    )
  )

  (setq twittering-use-master-password t)

  (if (getenv "http_proxy")
      (twittering-toggle-proxy))

#+END_SRC

* elfeed
#+BEGIN_SRC emacs-lisp
  (if (>= emacs-major-version 24)
      (progn
        (add-to-list 'load-path "~/.emacs.d/elpa/elfeed-20150608.13027")
        (add-to-list 'load-path "~/.emacs.d/elpa/elfeed-org-20150412.145")
        (require 'elfeed-org)
        (elfeed-org)
        (setq rmh-elfeed-org-files (list "~/org/elfeed.org"))))
#+END_SRC
* [[http://www.emacswiki.org/emacs/MalyonMode][Mylon]]

#+BEGIN_SRC emacs-lisp
  (require 'malyon)
#+END_SRC

* TemplateToolkit

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.tt2$" . html-mode))

#+END_SRC

* EPG/GPG

#+BEGIN_SRC emacs-lisp
  ;; Do not use gpg agent when runing in terminal
  (defadvice epg--start (around advice-epg-disable-agent activate)
    (let ((agent (getenv "GPG_AGENT_INFO")))
      (when (not (display-graphic-p))
        (setenv "GPG_AGENT_INFO" nil))
      ad-do-it
      (when (not (display-graphic-p))
        (setenv "GPG_AGENT_INFO" agent))))

  ;; (defadvice epg--start (around advice-epg-disable-agent disable)
  ;;   "Don't allow epg--start to use gpg-agent in plain text terminals."
  ;;   (if (display-graphic-p)
  ;;       ad-do-it
  ;;     (let ((agent (getenv "GPG_AGENT_INFO")))
  ;;       (setenv "GPG_AGENT_INFO" nil) ; give us a usable text password prompt
  ;;       ad-do-it
  ;;       (setenv "GPG_AGENT_INFO" agent))))
  ;; (ad-enable-advice 'epg--start 'around 'advice-epg-disable-agent)
  ;; (ad-activate 'epg--start)

#+END_SRC

* Perl

#+BEGIN_SRC emacs-lisp
  (require 'cperl-mode)
  (fset 'perl-mode 'cperl-mode)

  (eval-after-load "cperl-mode"
    '(add-hook 'cperl-mode-hook (lambda() (cperl-set-style "GNU"))))


#+END_SRC

* auto-completion

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elpa/auto-complete-20150618.1949")
  (require 'auto-complete-config)
  (add-to-list 'ac-dictionary-directories "~/.emacs.d/elpa/auto-complete-20150618.1949")
  (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
  (ac-config-default)
  (add-to-list 'ac-modes 'cfengine3-mode)
  (add-to-list 'ac-modes 'dns-mode)
  (add-to-list 'ac-sources 'ac-source-yasnippet)

#+END_SRC

* syntax-highlighting
#+BEGIN_SRC emacs-lisp
  (font-lock-mode)
  (global-font-lock-mode 1)

#+END_SRC

* remove trailing whitespace
    [2014-09-24 Wed 16:56]

There are some file formats out there where you shouldn't use this
function. [[http://en.wikipedia.org/wiki/YAML][YAML]] is only one of them.
You can disable this functionality on a per file basis by adding lines
like these:

#+BEGIN_SRC cperl
    # Local Variables:
    # bba-keep-whitespaces: 1
    # End:
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (eval-after-load "cfengine3-mode"
    '(add-hook 'cfengine3-mode-hook (lambda() (add-hook 'write-contents-functions
                                                   (lambda()
                                                      (unless (boundp 'bba-keep-whitespaces)
                                                        (save-excursion
                                                          (delete-trailing-whitespace)))
                                                      )
                                                   )
                                 )
               ))


  (eval-after-load "cperl-mode"
    '(add-hook 'cperl-mode-hook (lambda() (add-hook 'write-contents-functions
                                                    (lambda()
                                                      (unless (boundp 'bba-keep-whitespaces)
                                                        (save-excursion
                                                          (delete-trailing-whitespace)))
                                                      )
                                                    )
                                  )
               ))

  (eval-after-load "dns-mode"
    '(add-hook 'dns-mode-hook (lambda() (add-hook 'write-contents-functions
                                                  (lambda()
                                                    (save-excursion
                                                      (delete-trailing-whitespace)))
                                                  )
                                )
               ))

  (eval-after-load "js-mode"
    '(add-hook 'js-mode-hook (lambda() (add-hook 'write-contents-functions
                                                   (lambda()
                                                     (save-excursion
                                                       (delete-trailing-whitespace)))
                                                   )
                                 )
               ))

  (eval-after-load "org-mode"
    '(add-hook 'org-mode-hook (lambda() (add-hook 'write-contents-functions
                                                  (lambda()
                                                    (unless (boundp 'bba-keep-whitespaces)
                                                      (save-excursion
                                                        (delete-trailing-whitespace)))))
                                )
               ))

  (eval-after-load "text-mode"
    '(add-hook 'text-mode-hook (lambda() (add-hook 'write-contents-functions
                                                   (lambda()
                                                     (unless (boundp 'bba-keep-whitespaces)
                                                       (save-excursion
                                                         (delete-trailing-whitespace)))
                                                     )
                                                   )
                                 )
               ))




#+END_SRC


* rpm spec buildrpm
    [2015-07-23 Thu 13:22]

Use C-c C-c to run rpmbuild if buffer is spec file.

#+BEGIN_SRC emacs-lisp
  (defun bba-build-rpm ()
  "Do rpmbuild -ba, with the current buffers filename."
  (interactive)
  (string-match "\\([^:]*\\)$" buffer-file-name)
  (let* ((spec-file (match-string 1 buffer-file-name))
         )
    (compile (concat "rpmbuild -ba " spec-file))
    ;; (shell-command (concat "rpmbuild -ba " spec-file))
    )
  )

  (add-hook 'sh-mode-hook
            (lambda ()
              (progn
                (if (string-match ".spec$" buffer-file-name)
                (define-key sh-mode-map "\C-c\C-c" 'bba-build-rpm))
      )))

#+END_SRC

* mode-line menu-bar etc

#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
  (line-number-mode t)
  (setq display-time-24hr-format t)
  (display-time)

  ( if (not window-system)
      (menu-bar-mode -1)
    )

  (if window-system
      (tool-bar-mode -1)
  )

  (setq initial-scratch-message "") ;; Uh, I know what Scratch is for

#+END_SRC

* Art Bollocks Mode
    [2014-09-28 Sun 22:33]

Keeps track of your writing.
Includes [[http://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests#Flesch_Reading_Ease][Flesch Reading Ease]] and [[http://en.wikipedia.org/wiki/Flesch–Kincaid_readability_test#Flesch.E2.80.93Kincaid_Grade_Level][Flesch Grade Level]].
With modifications by [[http://sachachua.com/blog/2011/12/emacs-artbollocks-mode-el-and-writing-more-clearly/][Sacha Chua]].

#+BEGIN_SRC emacs-lisp
    (if (>= emacs-major-version 24)
        (progn
          (require 'artbollocks-mode)
          ;; Avoid these phrases
          (setq weasel-words-regex
                (concat "\\b" (regexp-opt
                               '("one of the"
                                 "should"
                                 "just"
                                 "sort of"
                                 "a lot"
                                 "probably"
                                 "maybe"
                                 "perhaps"
                                 "I think"
                                 "really"
                                 "pretty"
                                 "maybe"
                                 "nice"
                                 "action"
                                 "utilize"
                                 "leverage") t) "\\b"))
          ;; Fix a bug in the regular expression to catch repeated words
          (setq lexical-illusions-regex "\\b\\(\\w+\\)\\W+\\(\\1\\)\\b")
          ;; Don't show the art critic words, or at least until I figure
          ;; out my own jargon
          (setq artbollocks nil)
          ;; Make sure keywords are case-insensitive
          (defadvice search-for-keyword (around sacha activate)
            "Match in a case-insensitive way."
            (let ((case-fold-search t))
              ad-do-it))

          (add-hook 'text-mode-hook 'artbollocks-mode)
          (add-hook 'org-mode-hook  'artbollocks-mode)
          )
      )
#+END_SRC

* window management
    [2014-09-24 Wed 13:03]

Bind f3 and f4 to previous/next pane.
#+BEGIN_SRC emacs-lisp
  (defun move-cursor-next-pane ()
    "Move cursor to the next pane."
    (interactive)
    (other-window 1))

  (defun move-cursor-previous-pane ()
    "Move cursor to the previous pane."
    (interactive)
    (other-window -1))

  (global-set-key (kbd "<f3>") 'move-cursor-previous-pane)
  (global-set-key (kbd "<f4>") 'move-cursor-next-pane)
#+END_SRC

* [[https://github.com/dotemacs/ipcalc.el][ipcalc]]
#+BEGIN_SRC emacs-lisp
      (require 'ipcalc)

#+END_SRC

* [[http://www.emacswiki.org/emacs/RecentFiles][RecentFiles]]

#+BEGIN_SRC emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-saved-items 200
        recentf-max-menu-items 142)
  (if (<= emacs-major-version 23)
      (global-set-key "\C-cr" 'recentf-open-files))
#+END_SRC

* insert-date function
#+BEGIN_SRC emacs-lisp
  (defun insert-date ()
  "Insert the current date"
  (interactive)
  (insert-string (format-time-string "%B %e, %Y")))
  (defun insert-timestamp ()
  "Insert the current timestamp"
  (interactive)
  (insert-string (format-time-string "%a %b %e %Y") " " (or (and (boundp 'user-full-name) user-full-name) (user-full-name))" <" (getenv "EMAIL") ">" ))
  (defun bba-insert-name ()
  "Insert name and emailaddress of current systemuser."
  (interactive)
  (insert-string (or (and (boundp 'user-full-name) user-full-name) (user-full-name))" <" (getenv "EMAIL") ">" ))

#+END_SRC

* [[http://www.howardism.org/Technical/Emacs/eshell-fun.html][eshell-here]]
Thanks to Howard Abrams.
modified because current version lacks function have
window-total-height.

#+BEGIN_SRC emacs-lisp
      (defun eshell-here ()
        "Opens up a new shell in the directory associated with the
      current buffer's file. The eshell is renamed to match that
      directory to make multiple eshell windows easier."
        (interactive)
        (let* ((parent (if (buffer-file-name)
                           (file-name-directory (buffer-file-name))
                         default-directory))
           ;;    (height (/ (window-total-height) 3))
               (name   (car (last (split-string parent "/" t)))))
      ;;    (split-window-vertically (- height))
          (split-window-vertically '-10)
          (other-window 1)
          (eshell "new")
          (rename-buffer (concat "*eshell: " name "*"))

          (insert (concat "ls"))
          (eshell-send-input)))

      (define-key global-map "\C-c!" 'eshell-here)

      (defun eshell/x ()
        (insert "exit")
        (eshell-send-input)
        (delete-window))



      (defun eshell/ssh (&rest args)
      "Secure shell"
      (let ((cmd (eshell-flatten-and-stringify
      (cons "ssh" args)))
      (display-type (framep (selected-frame))))
      (cond
      ((and
      (eq display-type 't)
      (getenv "STY"))
      (send-string-to-terminal (format "\033]83;screen %s\007" cmd)))
      ((eq display-type 'x)
      (eshell-do-eval
      (eshell-parse-command
      (format "rxvt -e %s &" cmd)))
      nil)
      (t
      (apply 'eshell-exec-visual (cons "ssh" args))))))

#+END_SRC

* [[http://stackoverflow.com/questions/3035337/in-emacs-can-you-evaluate-an-emacs-lisp-expression-and-replace-it-with-the-resul][eval emacs lisp expression and replace it]]
    [2014-11-02 Sun 18:21]

Use =C-c E= to evaluate and replace the last s-expression.

#+BEGIN_SRC emacs-lisp
  (defun bba/eval-last-sexp-replace ()
    "replace the last s-expression with its evaluated result"
    (interactive)
    (backward-kill-sexp)
    (prin1 (eval (read (current-kill 0)))
           (current-buffer)))

  (define-key global-map "\C-c\S-e" 'bba/eval-last-sexp-replace)
#+END_SRC

* goto-match-paren
#+BEGIN_SRC emacs-lisp
      (defun goto-match-paren (arg)
        "Go to the matching parenthesis if on parenthesis, otherwise insert %.
      vi style of % jumping to matching brace."
        (interactive "p")
        (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
              ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
              (t (self-insert-command (or arg 1)))))
      (global-set-key "%" 'goto-match-paren)

#+END_SRC

* safe hash bang files executable
safe files with #! in first line as user executable.

#+BEGIN_SRC emacs-lisp
  (add-hook `after-save-hook
            #'(lambda ()
                (check-parens)
                (and (save-excursion
                       (save-restriction
                         (widen)
                         (goto-char (point-min))
                         (save-match-data
                           (looking-at "^#!"))))
                     (if (file-remote-p buffer-file-name)
                         (progn
                           (not (file-executable-p buffer-file-name))
                           (shell-command (concat "chmod u+x " (file-name-nondirectory buffer-file-name)))
                           (message
                            (concat "Saved as script via tramp: " buffer-file-name))
                           )
                       (progn
                         (not (file-executable-p buffer-file-name))
                         (shell-command (concat "chmod u+x " buffer-file-name))
                         (message
                          (concat "Saved as script: " buffer-file-name)))))))

#+END_SRC

* move lines
    [2014-11-11 Tue 12:24]

=M-p= and =M-n= to move current line up or down.

#+BEGIN_SRC emacs-lisp
  (defun bba/move-line (n)
    "Move the current line up or down by N lines."
    (interactive "p")
    (let* ((column (current-column))
           (start (progn (beginning-of-line) (point)))
           (end (progn (end-of-line) (forward-char) (point)))
           (line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      (forward-line -1)
      (forward-char column)))

  (defun bba/move-line-up (n)
    "Move the current line up by N lines."
    (interactive "p")
    (bba/move-line (if (null n) -1 (- n))))

  (defun bba/move-line-down (n)
    "Move the current line down by N lines."
    (interactive "p")
    (bba/move-line (if (null n) 1 n)))

  (define-key global-map (kbd "M-p") 'bba/move-line-up)
  (global-set-key (kbd "M-n") 'bba/move-line-down)

#+END_SRC
* helm

Some links you might check out:

- [[http://tuhdo.github.io/helm-intro.html][A Package in a league of its own: Helm]]
- [[http://wikemacs.org/wiki/Helm][Helm - WikEmacs]]
- [[http://emacs.stackexchange.com/questions/2867/how-should-i-change-my-workflow-when-moving-from-ido-to-helm][How should I change my workflow when moving from IDO to Helm - Emacs
  Stack Exchange]]
- [[https://github.com/ShingoFukuyama/helm-swoop][helm-swoop]]

#+BEGIN_SRC emacs-lisp
  (if (>= emacs-major-version 24)
      (progn
        (add-to-list 'load-path
                     "~/.emacs.d/elpa/helm-20150704.1247")
        (require 'helm)
        (helm-mode 1)
        (global-set-key (kbd "M-y") 'helm-show-kill-ring)
        (global-set-key (kbd "C-c w") 'helm-man-woman)
        (global-set-key (kbd "M-x") 'helm-M-x)
        (global-set-key "\C-cr" 'helm-recentf)
        (global-set-key (kbd "M-s o") 'helm-occur)
        (define-key global-map "\C-x\C-b" 'helm-buffers-list)
        (define-key global-map "\C-x\C-k\C-h" 'helm-execute-kmacro)
        (define-key global-map "\C-cy" 'helm-yas-complete)
        (setq helm-yas-display-key-on-candidate t)

        (add-hook 'eshell-mode-hook
                  #'(lambda()
                      (define-key eshell-mode-map
                        [remap eshell-pcomplete]
                        'helm-esh-pcomplete)
                      (define-key eshell-mode-map
                        (kbd "M-p")
                        'helm-eshell-history)
                      ))
        (setq helm-mini-default-sources '(helm-source-buffers-list
                                          helm-source-recentf
                                          helm-source-bookmarks
                                          helm-source-buffer-not-found))
        (define-key global-map "\C-xb" 'helm-mini)
        )
  )

#+END_SRC

* browser switch

switch default browser between eww and default.

#+BEGIN_SRC emacs-lisp
  (defun bba-switch-default-browser ()
      "switch between default browser and eww"
    (interactive)
    (if (string-equal "browse-url-default-browser" browse-url-browser-function)
        (setq browse-url-browser-function 'eww-browse-url)
      (setq browse-url-browser-function 'browse-url-default-browser)
      )
    (message "%s" browse-url-browser-function)
    )

#+END_SRC

* [[http://emacswiki.org/emacs/KeyChord][key-chord]]

combine key strokes to access commands even faster.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elpa/key-chord-20140929.2246")

  (require 'key-chord)
  (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.16)
  (key-chord-define cfengine3-mode-map ";;" "\C-e;")
  (key-chord-define cfengine3-mode-map ",," "\C-e,")
  (key-chord-define cperl-mode-map ";;" "\C-e;")
  (key-chord-define cperl-mode-map ",," "\C-e,")
  (key-chord-define-global "uu" 'undo)
  (key-chord-define-global "xb" 'ido-switch-buffer)
  (key-chord-define-global "xf" 'ido-find-file)
  (if (>= emacs-major-version 24)
      (progn
        ))


#+END_SRC

* key bindings
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-x\S-f" 'find-file-at-point)

  (define-key global-map "\C-c\S-t" 'visit-tags-table)
  (define-key global-map "\C-cf" 'tags-search)

  (define-prefix-command 'bba/toggle)
  (define-key global-map "\C-ct" 'bba/toggle)

  (define-key bba/toggle "a" 'artbollocks-mode)
  (define-key bba/toggle "b" 'bba-switch-default-browser)
  (define-key bba/toggle "f" 'auto-fill-mode)
  (define-key bba/toggle "\S-f" 'follow-mode)
  (define-key bba/toggle "i" 'impatient-mode)
  (define-key bba/toggle "p" 'smartparens-mode)
  (define-key bba/toggle "s" 'flyspell-mode)
  (define-key bba/toggle "\S-w" 'which-function-mode)
#+END_SRC

Toggle Whitespace mode on and off.  Whitespace mode causes all hard
tabs to be highlighted.  You can also configure it to highlight space
characters in a different color.  There is also an untabify function
to convert hard tabs to the appropriate number of spaces, and a tabify
function to convert groups of spaces to hard tabs.

#+BEGIN_SRC emacs-lisp
  (define-key bba/toggle "w" 'whitespace-mode)

  (define-prefix-command 'bba/launcher)
  (define-key global-map "\C-xl" 'bba/launcher)

  (define-key bba/launcher "b" 'browse-url-at-point)
  (define-key bba/launcher "B" 'eww)
  (define-key bba/launcher "c" 'calculator)
  (define-key bba/launcher "d" 'ediff-buffers)
  (define-key bba/launcher "e" 'elfeed)
  (define-key bba/launcher "i" 'ielm)
  (define-key bba/launcher "s" 'shell)
  (define-key bba/launcher "S" 'synonyms)
  (define-key bba/launcher "t" 'git-timemachine)
  (define-key bba/launcher "T" 'twittering-mode)

  (define-key global-map "\C-c\C-t" 'insert-timestamp)
  (define-key global-map "\C-c\M-c" 'centered-cursor-mode)

  (define-key global-map "\C-ci" 'imenu)
  (define-key global-map "\C-c\S-g" 'rgrep)
  (define-key global-map "\C-cf" 'load-git-cfengine)

  (define-key global-map "\C-c\C-w" 'fixup-whitespace)

  (define-key global-map "\M-g\M-d" 'magit-diff-unstaged)
  (define-key global-map "\M-g\M-b" 'magit-branch-manager)
  (define-key global-map "\M-gb" 'magit-blame-mode)
  (define-key global-map "\C-cm" 'magit-status)

  (define-key global-map "\C-c\S-f" (lambda()
                                   (interactive)
                                   (message (buffer-file-name))))

  (if (<= emacs-major-version 23)
      (progn
        (define-key global-map "\C-cw" (lambda ()
                                         (interactive)
                                         (let ((woman-use-topic-at-point t))
                                           (woman))))
        (define-key global-map "\C-x\C-b" 'ibuffer)
        )
  )

  (define-key global-map "\C-c\M-d" 'diff-buffer-with-file)

  ;;; ** Use C-+ and C-- to adjust font size

  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)



#+END_SRC

=isearch-forward-regexp= is much more useful than =isearch-forward= so
we use that as default:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
#+END_SRC

* configure some default values
    [2014-10-02 Thu 00:27]

Specify printing format

#+BEGIN_SRC emacs-lisp
  (setq ps-paper-type 'a4)
#+END_SRC

Set ispell dictionary

#+BEGIN_SRC emacs-lisp
   (setq ispell-dictionary "english")
#+END_SRC

Set shell for M-| command

#+BEGIN_SRC emacs-lisp
  (setq shell-file-name "/bin/bash")
#+END_SRC

Set Shell used by TeX

#+BEGIN_SRC emacs-lisp
  (setq tex-shell-file-name "/bin/bash")
#+END_SRC

Set grep command options

#+BEGIN_SRC emacs-lisp
  (setq grep-command "grep -i -nH -e ")
#+END_SRC

Confirm quit to avoid hitting C-x C-c by accident.

#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

Ignore case when completing file names

#+BEGIN_SRC emacs-lisp
  (setq read-file-name-completion-ignore-case t)
#+END_SRC

Highlight parenthesis pairs

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Blinking parenthesis

#+BEGIN_SRC emacs-lisp
  (setq blink-matching-paren-distance nil)
#+END_SRC

Highlight text between parens

#+BEGIN_SRC emacs-lisp
  (setq show-paren-style 'expression)
#+END_SRC

Use buffer name as frame title

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "%b - emacs")
#+END_SRC

Completion in mini-buffer

#+BEGIN_SRC emacs-lisp
  (icomplete-mode t)
#+END_SRC

Stack minibuffers

#+BEGIN_SRC emacs-lisp
  (setq enable-recursive-minibuffers t)
#+END_SRC

Make dired human readable

#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC

Some nice functions

#+BEGIN_SRC emacs-lisp
  ;;(blink-matching-paren 1)
  ;;(paren-activate)
#+END_SRC


* other stuff

#+BEGIN_SRC emacs-lisp

    ;;(move-overlay hl-line-overlay
    ;;            (line-beginning-position) (1+ (line-end-position))
    ;;            (current-buffer))

    ;; (set-face-background-pixmap 'default "~/.emacs.d/xemacs-bg.xpm")
    (set-foreground-color "green")
    (set-background-color "black")

    ;; pos1: goto start of line, start of screen, start of buffer
    ;; end: goto end of line, end of screen, end of buffer

    (global-set-key '[(home)] 'chb-home)
    (global-set-key '[(end)] 'chb-end)
    ;;
    (defun chb-home ()
    (interactive)
    (setq zmacs-region-stays t)
    (if (not (bolp))
    (beginning-of-line)
    (if (eq this-command last-command)
    (cond
     ((not (= (point) (window-start)))
      (move-to-window-line 0)
      (beginning-of-line))
     (t
      (goto-char (point-min)))))))

    (defun chb-end ()
    (interactive)
    (setq zmacs-region-stays t)
    (if (not (eolp))
    (end-of-line)
    (if (eq this-command last-command)
    (cond
     ((not (= (point) (save-excursion
                        (move-to-window-line -1)
                                (end-of-line)
                                (point))))
              (move-to-window-line -1)
              (end-of-line))
             (t
              (goto-char (point-max)))))))



#+END_SRC

You have to work hard to be lazy.

#+BEGIN_SRC emacs-lisp
  (defalias 'ts 'transpose-sentences)
  (defalias 'tp 'transpose-paragraphs)
#+END_SRC

* set theme bba1

[[https://emacsfodder.github.io/emacs-theme-editor/][Emacs Theme Editor]] is a nice tool to define your colors.

#+BEGIN_SRC emacs-lisp
  (deftheme bba1 "DOCSTRING for bba1")
    (custom-theme-set-faces 'bba1
     '(default ((t (:foreground "#07e30d" :background "#282828" ))))
     '(cursor ((t (:background "#f09213" ))))
     '(fringe ((t (:background "#131313" ))))
     '(mode-line ((t (:foreground "#282828" :background "#d96503" ))))
     '(region ((t (:background "#7a7674" ))))
     '(secondary-selection ((t (:background "#584e47" ))))
     '(font-lock-builtin-face ((t (:foreground "#fe8019" ))))
     '(font-lock-comment-face ((t (:foreground "#df7114" ))))
     '(font-lock-function-name-face ((t (:foreground "#b8bb26" ))))
     '(font-lock-keyword-face ((t (:foreground "#fb4934" ))))
     '(font-lock-string-face ((t (:foreground "#b8bb26" ))))
     '(font-lock-type-face ((t (:foreground "#d3869b" ))))
     '(font-lock-constant-face ((t (:foreground "#d3869b" ))))
     '(font-lock-variable-name-face ((t (:foreground "#83a598" ))))
     '(minibuffer-prompt ((t (:foreground "#b8bb26" :bold t ))))
     '(font-lock-warning-face ((t (:foreground "red" :bold t ))))
     )
  (provide-theme 'bba1)

#+END_SRC

* load custom file
    [2014-10-02 Thu 00:37]

#+BEGIN_SRC emacs-lisp
    (setq custom-file
          (expand-file-name "custom.el"
                            (expand-file-name ".emacs.d" "~")))
  ;;  (load-file user-init-file)
    (load-file custom-file)

#+END_SRC

* Set default font on Mac

#+BEGIN_SRC emacs-lisp
  (if (string-equal system-type "darwin")
   (set-default-font "Monaco 14"))
#+END_SRC



* dns-mode

If you edit zone files via TRAMP you might want to activate them via
=rndc reload=. =C-c C-r= just does that for you.

#+BEGIN_SRC emacs-lisp
  (defun dns-rndc ()
  "Do rndc reload of current buffers filename."
  (interactive)
  (string-match "/\\([^/]*\\)$" buffer-file-name)
  (let* ((zonefile (match-string 1 buffer-file-name))
         )
    (if (y-or-n-p (format "rndc reload %s?" zonefile))
        (shell-command (concat "rndc reload " zonefile ) ) )
    )

  )

  (add-hook 'dns-mode-hook
    (lambda ()
      (define-key dns-mode-map "\C-c\C-r" 'dns-rndc)
      ))

#+END_SRC
* save history
    [2015-04-05 Sun 12:57]

Write a history of your emacs into your org git repository.
You have it available on every system and it's still private at it's
not in the public git emacs configuration.

- kill ring
- search ring
- regexp-search-ring
- last-kbd-macro
- kmacro-ring

all in your history.

#+BEGIN_SRC emacs-lisp
  (savehist-mode 1)
  (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring last-kbd-macro kmacro-ring))
  (setq kmacro-ring-max 42)
  (setq history-delete-duplicates t)
  (if (equal "work" (getenv "SYSENV"))
      (if (file-exists-p "~/workorg")
          (setq savehist-file "~/workorg/emacshistory")
        )
    (if (file-exists-p "~/org")
        (setq savehist-file "~/org/emacshistory")
      )
    (if (file-exists-p savehist-file)
        (load-file savehist-file)
        )

  )

#+END_SRC
* done

Display greetings:

#+BEGIN_SRC emacs-lisp
  (message "All done, %s!" (user-login-name) )
  (totd)
#+END_SRC

    [2014-08-27 Wed 11:02]
* old config

#+BEGIN_SRC emacs-lisp :eval no :tangle no





    (setq org-html-head "<style type=\"text/css\">
body {
    background-color: #bbbbbb;
}     </style>")


  body {
      background-color: #bbbbbb;
      color: #000000;
      margin: 0px;
      padding: 0px;
      height: 100%;
  }'



    ;;; * Big Brother Database

    ;; (require 'bbdb)
    ;; (bbdb-initialize)

    ;;; * auto-completion

    ;;(move-overlay hl-line-overlay
    ;;            (line-beginning-position) (1+ (line-end-position))
    ;;            (current-buffer))

    ;; (set-face-background-pixmap 'default "~/.emacs.d/xemacs-bg.xpm")
    (set-foreground-color "green")
    (set-background-color "black")

    ;; pos1: goto start of line, start of screen, start of buffer
    ;; end: goto end of line, end of screen, end of buffer

    (global-set-key '[(home)] 'chb-home)
    (global-set-key '[(end)] 'chb-end)
    ;;
    (defun chb-home ()
    (interactive)
    (setq zmacs-region-stays t)
    (if (not (bolp))
    (beginning-of-line)
    (if (eq this-command last-command)
    (cond
     ((not (= (point) (window-start)))
      (move-to-window-line 0)
      (beginning-of-line))
     (t
      (goto-char (point-min)))))))

    (defun chb-end ()
    (interactive)
    (setq zmacs-region-stays t)
    (if (not (eolp))
    (end-of-line)
    (if (eq this-command last-command)
    (cond
     ((not (= (point) (save-excursion
                        (move-to-window-line -1)
                                (end-of-line)
                                (point))))
              (move-to-window-line -1)
              (end-of-line))
             (t
              (goto-char (point-max)))))))




    ;; safe files with #! in first line as user executable

    (add-hook `after-safe-hook
              #'(lambda ()
                 (and (save-excursion
                        (save-restriction
                          (widen)
                          (goto-char (point-min))
                          (save-match-data
                            (looking-at "^#!"))))
                      (not (file-executable-p buffer-file-name))
                      (shell-command (concat "chmod u+x " buffer-file-name))
                      (message
                       (concat "Saved as script: " buffer-file-name)))))

    ;;
    ;; list of recently opened files
    ;;

    ;; (load "recent-files")
    ;; (setq recent-files-dont-include
    ;;      '("~$" "tmp/." "INBOX" ".bbdb" ".newsrc." ))

    ;; (setq recent-files-non-permanent-submenu t)
    ;; (setq recent-files-commands-submenu t)
    ;; (setq recent-files-number-of-entries 30)
    ;; (recent-files-initialize)

    ;;  Make the <ctrl> c F12 key toggle Whitespace mode on and off.  Whitespace mode causes
    ;; all hard tabs to be highlighted.  You can also configure it to highlight space characters
    ;; in a different color.  There is also an untabify function to convert hard tabs to the
    ;; appropriate number of spaces, and a tabify function to convert groups of spaces to
    ;; hard tabs.
    (global-set-key (kbd "C-c <f12>") 'whitespace-mode)


    ;; (add-hook 'find-file-hooks 'fume-setup-buffer)
    ;; (add-hook 'Manual-mode-hook 'turn-on-fume-mode)

    ;; (function-menu USE-MENUBAR RETURN-ONLY MENU-ITEM-FUNCTION)

    ;;====================================================================
    ;;The Following Code Will Enable Me To Use The "Fume" Package Which
    ;;Creates, On The Menubar, A "Functions" Menu Containing The List Of
    ;;All The Functions In The Buffer Being Currently Displayed.
    ;;====================================================================
    ;;
    ;;Setq-Default Set The Default Value Of A Var.  This Def. Val. Is Seen
    ;;In Buffers That *Don'T* Have Their Own Values For The Variable.

    ;(require function-menu)
    ;(Define-Key Global-Map 'F8 'Function-Menu)
    ;(Add-Hook 'Find-File-Hooks 'Fume-Add-Menubar-Entry)
    ;(Define-Key Global-Map "\C-Cl" 'Fume-List-Functions)
    ;(Define-Key Global-Map "\C-Cg" 'Fume-Prompt-Function-Goto)
    ;(Define-Key Global-Map '(Shift Button3) 'Mouse-Function-Menu)
    ;(Define-Key Global-Map '(Meta  Button1) 'Fume-Mouse-Function-Goto)

    ;(Add-Hook
    ; 'Find-File-Hooks
    ; (Function
    ;  (Lambda()
    ;    (If (And (String-Match "Xemacs" Emacs-Version)
    ;             (Boundp 'Emacs-Major-Version)
    ;            (Or (= Emacs-Major-Version 20)
    ;                 (And
    ;                  (= Emacs-Major-Version 19)
    ;                 (>= Emacs-Minor-Version 13)))
    ;             (Not (Eq Major-Mode 'Latex-Mode)))
    ;        (Fume-Add-Menubar-Entry))
    ;    )))


    (define-key global-map "\C-ct" 'visit-tags-table)
    (define-key global-map "\C-cf" 'tags-search)

    (define-key global-map "\C-c\C-t" 'insert-timestamp)
    (define-key global-map "\C-c\M-c" 'centered-cursor-mode)

    (define-key global-map "\C-cf" 'load-git-cfengine)

    (define-key global-map "\C-c\C-w" 'fixup-whitespace)


    (define-key global-map "\M-g\M-d" 'magit-diff-unstaged)
    (define-key global-map "\M-g\M-b" 'magit-branch-manager)
    (define-key global-map "\M-gb" 'magit-blame-mode)
    (define-key global-map "\C-cm" 'magit-status)

    (define-key global-map "\C-cw" (lambda ()
                                     (interactive)
                                     (let ((woman-use-topic-at-point t))
                                       (woman))))
    (define-key global-map "\C-c\M-d" 'diff-buffer-with-file)

    ;;; ** Use C-+ and C-- to adjust font size

    (define-key global-map (kbd "C-+") 'text-scale-increase)
    (define-key global-map (kbd "C--") 'text-scale-decrease)

    ;; NUMBERIC KEYPAD. nice number pad conveniences as extra function keys

    ;; (global-set-key (kbd "<kp-subtract>") 'ergoemacs-close-current-buffer)
    ;; (global-set-key (kbd "<kp-divide>") 'ergoemacs-previous-user-buffer)
    ;; (global-set-key (kbd "<kp-multiply>") 'ergoemacs-next-user-buffer)

    ;; (global-set-key (kbd "<C-kp-divide>") 'ergoemacs-previous-emacs-buffer)
    ;; (global-set-key (kbd "<C-kp-multiply>") 'ergoemacs-next-emacs-buffer)

    ;; (global-set-key (kbd "<kp-decimal>") 'other-window)
    ;; (global-set-key (kbd "<kp-0>") 'delete-window)
    ;; (global-set-key (kbd "<kp-1>") 'delete-other-windows)
    ;; (global-set-key (kbd "<kp-2>") 'split-window-vertically)
    ;; (global-set-key (kbd "<kp-3>") 'xah-open-file-at-cursor)

    ;; (global-set-key (kbd "<kp-9>") 'isearch-forward)

    (setq custom-file
          (expand-file-name "custom.el"
                            (expand-file-name ".emacs.d" "~")))
    (load-file user-init-file)
    (load-file custom-file)
#+END_SRC
